using Advent_of_Code_2022.libs;
using System.Diagnostics;
using System.Text.RegularExpressions;
using static Advent_of_Code_2022.Day17;

namespace Advent_of_Code_2022
{
    internal class Day22
    {
        //public static string input = "        ...#\r\n        .#..\r\n        #...\r\n        ....\r\n...#.......#\r\n........#...\r\n..#....#....\r\n..........#.\r\n        ...#....\r\n        .....#..\r\n        .#......\r\n        ......#.\r\n\r\n10R5L5R10L4R5L5";
        public static string input = "                                                  ..#......#.#..............................##.......#.................##.........#.#............#....\r\n                                                  ....#........................#......#.................#.#.......##......#........#..#.....#...#..#..\r\n                                                  ...#..............#..............#........#..#.........##......#..............#................#....\r\n                                                  .....#..#..............##..#..........#.........#...............................#...................\r\n                                                  ............#...................#.....................#.......#..........#.#......#.........##.##...\r\n                                                  ............................#..............................#..............#......#..#.#...........##\r\n                                                  ..........#......#.........#..........#..................................................#..........\r\n                                                  .......#...#....................#.........##...#...........#...............###......##....#.........\r\n                                                  ...#............#...............................###.....##.........................#................\r\n                                                  .#.................#...............#.........#......#.#.....................#......#................\r\n                                                  ........#...............................#.......#.....#.##...........#....................#.........\r\n                                                  ...............#...#.#....##.....#...........#....#........#......#......#......#..#......#.....#...\r\n                                                  ...##.#.#....#..................#..........#........................#.#............#......#...#..#..\r\n                                                  ...##....#.....#....#.#................#....#.....#...#.............................................\r\n                                                  ...#....#............#..#.....#.............#..............#......#..............#.............#....\r\n                                                  .......#.....#..#....#.........................#..............##...#.#........#.#........##........#\r\n                                                  .....#..#......#...................#....#.##....#.....##..........#.....#....#.........#............\r\n                                                  ...................#......#...##..#....................#..............#.#.......#.........#.#......#\r\n                                                  #..#.............#.....#.........#.............#..........#.##.....#...............#.........#......\r\n                                                  ............................#............#...............#.......#.#..#............#................\r\n                                                  .............#.#...#.....#...##...#.........#...#....#............#..........#.#.#............#.....\r\n                                                  ...................#.......#..........#.........#.............................#..........##.........\r\n                                                  ...........#.......#............#......#.....#..#.................#...............#.........#.......\r\n                                                  .#................................#..#.....##..#....#...........#....#...#.........#...........#....\r\n                                                  ........#...#............................#.#............###..#........#........#......##......#.....\r\n                                                  ........#.......#..........#.........#.#......................#.......##.......#........##..........\r\n                                                  #.......#...........#...........................#.......#...............#.#.......#..#..........#...\r\n                                                  ...............................................#.........................#.#.............###..#....#\r\n                                                  ........................#...#.....#......#...............................##.....#.......#..#........\r\n                                                  ..#.......#..#.#...#......................#.........................#........#......#...........#.#.\r\n                                                  ..#.........#.#....#........###.##..............#....#............#.......#...#...............#.##..\r\n                                                  .......#.....#................#....#...............#......##.........#...............#...#.#.#......\r\n                                                  ........#.......................#.....#..........#..........#..#..#................................#\r\n                                                  ..................#.#..........#....#.......................#....................#...#......#......#\r\n                                                  .....##......#.................#.............#...........#..#...#........#..........................\r\n                                                  ..................#.....#.......#.......#..........#...##......#...#.##.................#........#..\r\n                                                  .........#......#...#....................#..#.....................#...#...........#.........#..#....\r\n                                                  ....#...........#..................#..#....#................#................#....##................\r\n                                                  ...#.....#.........#......##...............##.##...#..##..........#.....#..................#........\r\n                                                  ..#..#.................#......#.......#.........................#.##..#..................#..........\r\n                                                  .#.......#......##.................#.#........#...#....................................##.........#.\r\n                                                  .#......#...............#........#.................#..#....#.#...#..#.......#.........#.............\r\n                                                  .#..#...................#.#..........#.........................#.#.............#..................#.\r\n                                                  .......####.#.............#..#..................#...#.............##......#..............#..........\r\n                                                  ............#............#.....#..#..#..........#....................#.#....#.....#.#......##.......\r\n                                                  .........#..........#.........#.#.....#...................#.....#..#...............#................\r\n                                                  ........##....................#..........#................................#...#......#..............\r\n                                                  .#.....#.#....##....#....#....#........#....#...#...............#..................#...........#....\r\n                                                  ...................#..#.....#.#........#.......#................................#..............#....\r\n                                                  ..#............#...........................................#.....#..#.........................#.....\r\n                                                  .#........................#.#..................#..\r\n                                                  .....#........#.....#...........#.................\r\n                                                  .........#........................................\r\n                                                  ..#.#.#.#.....#.............#.....................\r\n                                                  .......#.#....#.#..............#..................\r\n                                                  .......................#...#.........#.#..#....#..\r\n                                                  ...#........#...............#....................#\r\n                                                  ....................#............#......#.........\r\n                                                  ........................#........................#\r\n                                                  ........................................#...#.....\r\n                                                  ..........#.......................#.........#.....\r\n                                                  ...........#.......#............#..........#..#...\r\n                                                  .#............#.................#.#.........#.....\r\n                                                  ..............#.#.....................#.........#.\r\n                                                  .............#...#...................#..#.##......\r\n                                                  ...................#...#..#.......................\r\n                                                  ...#......#.#................#...................#\r\n                                                  .............#..#.................................\r\n                                                  ........#..............#...#.........#............\r\n                                                  ..##.....................#......##...#.....#......\r\n                                                  ...#.#.........#...................#.#..#.........\r\n                                                  .#.....#...................#.....#..........#.#...\r\n                                                  .............#.............#....#..#.#........#..#\r\n                                                  .....#.................#..........#...............\r\n                                                  ....#............#.....##..........#.........#.#..\r\n                                                  .........#..........#.....................#.......\r\n                                                  ...#..............................................\r\n                                                  .............#.#........#...#....#.......#........\r\n                                                  ..#...#........#.......#..........................\r\n                                                  ..#.#.............#...#........#...#....#....#....\r\n                                                  ....##...................#............#...........\r\n                                                  ..#.#....#.#.##.........##.....#..#.#.............\r\n                                                  ..#...........#..............#....................\r\n                                                  ....#.....................#..........#............\r\n                                                  #..#.##..#.....................................##.\r\n                                                  .................#...#.........##.................\r\n                                                  ##.......................#................#.#....#\r\n                                                  ...#...........#.....##.........................#.\r\n                                                  ...............#......#...##...............#......\r\n                                                  ....................#................#............\r\n                                                  ......##......#......................#.....#......\r\n                                                  .......#..#.....#............#.#...............#..\r\n                                                  .....................#....##...........##.........\r\n                                                  #...........#................#........#...........\r\n                                                  .....#............#.#.....#....#..................\r\n                                                  ........................................###.......\r\n                                                  ........#........................#................\r\n                                                  .......#.......#......#..........#.....#.#........\r\n                                                  ...#.....#.#....................##...............#\r\n                                                  .......#......#....#........#...........#.........\r\n.#.......#..................#......#..........#................#....#............#......#...........\r\n#.....#....#...#..............#..#...............#........#......#..................................\r\n........#.....................#.......#....#..................................#.#......#............\r\n...#...#.....#..........#.....#...............#.##.........................#..................#.....\r\n.......................#.##....#....#........#..........................#....#.##........#........#.\r\n......#...#..............#.....#.......#...............##.......##..................................\r\n.........................#.#......#................#..#.........#..#......#.#..#..#....#............\r\n......#...#..#....#...........#.......#.......#...#...#.................#.#.....................#...\r\n#.............#...#..#.#......#......#..##.#....#..#....#.....#......#..#.......#....#.#.....#......\r\n..#....#........#..........................#...#..#.#...............................#..........#....\r\n.#....#..........#...#.....................#.....#....................#..#..........#..........#....\r\n....#.........................................#.........#.#.#.........#............#..##............\r\n.....#...#...........#.............#......#....#.................................#.#.............#..\r\n.#.....#..#..#............#................#.#............................#....................#....\r\n..............#..........#........#....#...#..........#.#..................#.#........#.......#.....\r\n.............#..........................#..#..#...#.................#..#...........#............#...\r\n...................#.............#...#.....##..........#................#.#..#..........#...........\r\n..##..........#................................#.........................................#..........\r\n#.............#........................##.#...#....#.............#......#...........................\r\n.........#........#.......##...........................#...#.....#..................#........##..#..\r\n#......#..........#...................#......#..........#..................#........#..#............\r\n....#..................#...#...............#.......#.......#.......#....#..#....#...#............#..\r\n.....#.#..............#............................#..#......#.#.............#......................\r\n......#..#......#...........#........#..........##............#...........##........................\r\n.......#...#.....#.........#.............#..............#..#.......#....................#........##.\r\n.....#......#...........#.....#.............................#...................#........#..........\r\n................#..........................#.............#........#.#...........#......#..........#.\r\n.##.....#..................#.........#........#..#..................##..............#...............\r\n......#..#...................#.#.#...#..............................#.#..........#..................\r\n......#.....#........#...................#..............#.#.......................#.....##..........\r\n.#..#................#......#.#.....#.........................................#.....#..#...........#\r\n.#............................#.....#.....#...##....#..........#..#......#....#..............#......\r\n...#........#..#.......#.....................#..........#.....#..............#.......##......###....\r\n........#.#.#............#..............#..........#........#.....#........#......#.......##........\r\n........##...#.#.................#......#.........#.#........##.....................................\r\n#.......#........#.................#...................................#...#........#......#....#...\r\n.......#...#........#.............#........#.....................#................#..#.......#......\r\n................#....................................#.....#.....#............#......#....#.......#.\r\n...#........#...................#..#...#.....#.............#...#.....#.#..........#..............#..\r\n.....#.............#........#.#.................................#.#..........#......#...............\r\n.#......#..#..............#..................#..#.#....#.......#................#.........#.....#.#.\r\n.#.........#..................................................#.....................................\r\n..#.#..............##.............#...#.....................#..................#.##....#............\r\n....#.#..........#..................#.......................................#...#...................\r\n.........#........#.....#......#..#........#..#.#.......#............#..........#...................\r\n#...##..#.........................#..#......#..........#...........................................#\r\n#....................................#...#.........................#...#....#......#.#..............\r\n...#.#...........#..#..#......#..#..............#...........#..............#........................\r\n.....#.................#..##.........#....#.......#.....##..#....#...................#......#.......\r\n...........##...#.........................#...............###.......................................\r\n...........#.#.....#..........#..#......#......#..\r\n................##...#........#....#.#...#........\r\n..............................#............#...#..\r\n.......................#..........................\r\n.....##......#..................##...........#....\r\n...................#..........................#...\r\n.#...............#.........#...#................#.\r\n..##.....#.#......#......#..............#.........\r\n....................#........#.#.............#....\r\n.#......#........#......#.....................#...\r\n..........................................#.......\r\n..........#........#.................#............\r\n........#..........#..#...........#..#.#..........\r\n.##.............#....................#............\r\n..........................#.............#.......#.\r\n#.#...#............#...#.....#.....#........#.....\r\n#.##......................#..#....................\r\n.......#..#..#...........................#.......#\r\n..........#.......#..#.........#.........#.....#..\r\n.......#.......##..##...................#..#......\r\n.......................##.........#...............\r\n..#.....#.......#..................#..............\r\n........#...#............#....#...............#...\r\n#.........#...#.......#...............#.#.........\r\n....#.............#...........#.....#.............\r\n...................#......#......#....#....#......\r\n.............#.....#........#.....##...#..........\r\n.....................##..............#...#....#...\r\n................#.......#..###....................\r\n.............#....#..................#.#.....#....\r\n......#.......#...#.......#.#.....................\r\n....................##...............#.#.......##.\r\n.................#.....................#..........\r\n...........#......#...........#...................\r\n.........##......#................................\r\n................................#.........#.......\r\n..#..............#...#...........#.......#.#...##.\r\n...............#.....#.....#......#.#.......##..#.\r\n...........#...#.....##.......#....#..............\r\n#.............#.............#.....................\r\n....#........#...............#.#......#.#.........\r\n...............#....#.......#..............#......\r\n......................#.................#.........\r\n......................#.............##..##.....#..\r\n....#..#......................#.....#.............\r\n..........#.....#...##..#.........#..........#....\r\n....#................#........................#...\r\n....................#...#.#.......................\r\n....#......#........#.....#..#..#.............#...\r\n..............##.......#........................##\r\n\r\n
        //public static string input = "     ..........\r\n     ..........\r\n     ..........\r\n     ..........\r\n     ..........\r\n     .....\t \r\n     .....\r\n     .....\r\n     .....\r\n     .....\r\n..........\r\n..........\r\n..........\r\n..........\r\n..........\r\n.....\r\n.....\r\n.....\r\n.....\r\n.....\r\n\r\n10R5L5R10L4R5L5R5L5R10L4R5L55L5R10L4R5L5R5L5R10L4R5L55L5R10L4R5L5R5L5R10L4R5L5";
        const int BLOCK_SIZE = 50; //todo

        public static Regex parsingRegex = new Regex(@"(\d+|[A-Z]+)");
        public static char[] dir2Char = { '>', 'v', '<', '^' };
        public const int DIR_RIGHT = 0, DIR_DOWN = 1, DIR_LEFT = 2, DIR_UP = 3;

        public static void Run()
        {
            (char[,] grid, List<string> instructions, List<Edge> cubeEdges) processedInput = ProcessInput(input);
            char[,] gridBackup = (char[,])processedInput.grid.Clone();

            /*Board board = new Board(processedInput.grid);
            Player player = new Player(board.GetStarterPoint(), DIR_RIGHT, processedInput.instructions, board, '@');

            player.StartWalking();
            GridRenderer.Render(0, 10, board.grid);
            Console.WriteLine($"Final password for Part 1: {player.GetFinalSum()}");*/

            CubeBoard cube = new CubeBoard(gridBackup, processedInput.cubeEdges);
            Player cubePlayer = new Player(cube.GetStarterPoint(), DIR_RIGHT, processedInput.instructions, cube, '@');

            cubePlayer.StartWalking();
            //cubePlayer.AssumeControl();
            GridRenderer.Render(0, 10, cube.grid);
            Console.WriteLine($"Final password for Part 2: {cubePlayer.GetFinalSum()}");
        }

        class Player
        {
            public Point loc;
            public int dir { get; set; }
            public List<string> instructions;
            public Board board;
            public char sprite;

            public Player(Point loc, int dir, List<string> instructions, Board board, char sprite)
            {
                this.loc = loc;
                this.dir = dir;
                this.instructions = instructions;
                this.board = board;
                this.sprite = sprite;
                board.SetPixel(loc, sprite);
            }

            public long GetFinalSum()
            {
                long sum = 0;
                sum += (board.height - (long)loc.y) * 1000;
                sum += ((long)loc.x + 1) * 4;
                sum += dir;
                return sum;
            }

            public bool Move(Point p)
            {
                /*if(loc.GetDistance(p) > 1)
                {
                    GridRenderer.Render(0, 10, board.grid);
                }*/
                board.SetPixel(loc, dir2Char[dir]);
                loc = p;
                board.SetPixel(p, sprite);
                return true;
            }

            public void Turn(int offset)
            {
                dir += offset;
                dir = Utils.RealModulo(dir, dir2Char.Length);
                board.SetPixel(loc, dir2Char[dir]);
            }

            public bool Step()
            {
                (Point, int) result = board.GetNextPoint(loc, dir);
                Point nextPoint = result.Item1;

                if (board.GetPixel(nextPoint) == '#')
                {
                    return false;
                }
                Move(nextPoint);
                int dirOffset = result.Item2;
                if (dirOffset != 0)
                {
                    Turn(dirOffset);
                }
                return true;
            }

            public void StartWalking()
            {
                for (int i = 0; i < instructions.Count; i++)
                {
                    string instruction = instructions[i];
                    int times;
                    if (int.TryParse(instruction, out times))
                    {
                        for (int j = 0; j < times; j++)
                        {
                            if (!Step())
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        switch (instruction)
                        {
                            case "R":
                                Turn(1);
                                break;
                            case "L":
                                Turn(-1);
                                break;
                            default:
                                throw new ArgumentException();
                        }
                    }
                }
            }

            public void AssumeControl()
            {
                GridRenderer.Render(0, 10, board.grid);
                bool finished = false;
                while (!finished)
                {
                    ConsoleKeyInfo key = Console.ReadKey();
                    switch (key.Key)
                    {
                        case ConsoleKey.Escape:
                            finished = true;
                            break;
                        case ConsoleKey.UpArrow:
                            Step();
                            break;
                        case ConsoleKey.LeftArrow:
                            Turn(-1);
                            break;
                        case ConsoleKey.RightArrow:
                            Turn(1);
                            break;
                    }
                    GridRenderer.Render(0, 10, board.grid);
                }
            }
        }

        class Board
        {
            public char[,] grid;
            public int width;
            public int height;

            public Board(char[,] grid)
            {
                this.grid = grid;
                width = grid.GetLength(0);
                height = grid.GetLength(1);
            }

            public bool IsOutOfBounds(Point p)
            {
                return (p.x < 0) || (p.x > width - 1) || (p.y < 0) || (p.y > height - 1);
            }
            public void GetInBounds(Point p)
            {
                p.x %= width;
                if (p.x < 0) { p.x = width - 1; }
                p.y %= height;
                if (p.y < 0) { p.y = height - 1; }
            }

            public virtual (Point, int) GetNextPoint(Point start, int dir)
            {
                Point curr = new Point(start.x, start.y);
                int dirDelta = 0;
                ShiftPoint(curr, dir);
                if (IsOutOfBounds(curr))
                {
                    GetInBounds(curr);
                }
                while (GetPixel(curr) == ' ')
                {
                    curr = WrapAround(curr, dir);
                }
                return (curr, dirDelta);
            }

            public Point WrapAround(Point curr, int dir)
            {
                ShiftPoint(curr, dir);
                GetInBounds(curr);
                return curr;
            }

            public void ShiftPoint(Point curr, int dir)
            {
                switch (dir)
                {
                    case DIR_RIGHT:
                        curr.x++;
                        break;
                    case DIR_LEFT:
                        curr.x--;
                        break;
                    case DIR_UP:
                        curr.y++;
                        break;
                    case DIR_DOWN:
                        curr.y--;
                        break;
                    default:
                        throw new ArgumentException();
                }
            }

            public Point GetStarterPoint()
            {
                for (int y = height - 1; y >= 0; y--)
                {
                    for (int x = 0; x < width; x++)
                    {
                        if (grid[x, y] == '.')
                        {
                            return new Point(x, y);
                        }
                    }
                }
                throw new Exception("Could not locate an open tile!");
            }

            public char SetPixel(Point p, char c)
            {
                grid[p.x, p.y] = c;
                return c;
            }

            public char GetPixel(Point p)
            {
                return grid[p.x, p.y];
            }
        }

        class CubeBoard : Board
        {
            public List<Edge> cubeEdges;

            public CubeBoard(char[,] grid, List<Edge> cubeEdges) : base(grid)
            {
                this.cubeEdges = cubeEdges;
            }

            public (Point, int) CrossCubeEdge(Point p, int dir)
            {
                if (cubeEdges == null)
                {
                    throw new ArgumentException("Cube edges were null!");
                }
                //We're a 2D point, but the cube has been folded flat anyways so just make a dummy 3d point with z = 0
                Trig.Point3D meIn3d = new Trig.Point3D(p.x, p.y, 0);
                foreach (Edge edge in cubeEdges)
                {
                    bool intersectsUs = edge.Intersects(meIn3d);
                    bool isPerpendicular = edge.IsPerpendicularToDir(dir);
                    if (intersectsUs && isPerpendicular)
                    {
                        Edge? oppositeEdge = edge.coincidentEdge;
                        if (oppositeEdge == null)
                        {
                            throw new Exception("Found an orphaned edge!");
                        }

                        int dirChange = 0;

                        double distance = meIn3d.Distance(edge.point2);
                        meIn3d.x = oppositeEdge.point1.x;
                        meIn3d.y = oppositeEdge.point1.y;

                        switch (edge.indexOffset)
                        {
                            case 0:
                                dirChange = 2;
                                break;
                            case -1:
                            case 3:
                                dirChange = 1;
                                break;
                            case 1:
                            case -3:
                                dirChange = -1;
                                break;
                            case 2:
                            case -2:
                                break;
                            default:
                                Debug.Fail("WEIRD OFFSET");
                                break;
                        }

                        double vectorX = oppositeEdge.point2.x - oppositeEdge.point1.x;
                        double vectorY = oppositeEdge.point2.y - oppositeEdge.point1.y;

                        if (vectorX != 0)
                        {
                            meIn3d.x += distance * Math.Sign(vectorX);
                        }
                        else if (vectorY != 0)
                        {
                            meIn3d.y += distance * Math.Sign(vectorY);
                        }
                        else
                        {
                            throw new ArgumentException("Could not determine vector for opposite edge!");
                        }

                        return (new Point((int)meIn3d.x, (int)meIn3d.y), dirChange);
                    }
                }
                throw new Exception("Could not find an edge to teleport us!");
            }

            public override (Point, int) GetNextPoint(Point start, int dir)
            {
                Point curr = new(start.x, start.y);
                int dirDelta = 0;
                ShiftPoint(curr, dir);
                if (IsOutOfBounds(curr) || GetPixel(curr) == ' ')
                {
                    return CrossCubeEdge(start, dir);
                }
                return (curr, dirDelta);
            }
        }

        public static (char[,] grid, List<string> code, List<Edge> cubeEdges) ProcessInput(string input)
        {
            string[] inputSplit = input.Split(new[] { "\r\n\r\n" }, StringSplitOptions.None); //String.Split() only takes 1 char as delimiter. This is how you split by a string according to StackOverflow.

            List<string> inputByLine = inputSplit[0].Split(new[] { "\r\n" }, StringSplitOptions.None).ToList();
            int width = inputByLine.Max(x => x.Length), height = inputByLine.Count;
            char[,] grid = new char[width, height];
            //Initializing the grid with all spaces
            for (int y = 0; y < height; y++)
            {
                for (int x = 0; x < width; x++)
                {
                    grid[x, y] = ' ';
                }
            }
            //Loading the real contents in
            for (int y = 0; y < inputByLine.Count; y++)
            {
                string line = inputByLine[height - 1 - y];
                for (int x = 0; x < line.Length; x++)
                {
                    grid[x, y] = line[x];
                }
            }
            //Chopping up the code with regex
            List<string> code = new();
            string codeString = inputSplit[1];
            MatchCollection matches = parsingRegex.Matches(codeString);
            foreach (Match match in matches.Cast<Match>())
            {
                GroupCollection groups = match.Groups;
                code.Add(groups[1].Value);
            }

            //Detecting all the faces
            List<Face> faces = new List<Face>();
            for (int i = height / BLOCK_SIZE - 1; i >= 0; i--)
            {
                for (int j = 0; j < width / BLOCK_SIZE; j++)
                {
                    int y = i * BLOCK_SIZE;
                    int x = j * BLOCK_SIZE;
                    if (grid[x, y] != ' ')
                    {
                        Trig.Point3D point1 = new Trig.Point3D(x, y, 0);
                        Trig.Point3D point2 = new Trig.Point3D(x, y + BLOCK_SIZE, 0);
                        Trig.Point3D point3 = new Trig.Point3D(x + BLOCK_SIZE, y + BLOCK_SIZE, 0);
                        Trig.Point3D point4 = new Trig.Point3D(x + BLOCK_SIZE, y, 0);
                        Face face = new(point1, point2, point3, point4); //Our corners, clockwise, starting with leftdownmost
                        faces.Add(face);
                    }
                }
            }

            //Now let's find out which faces are natural neighbors!
            CheckNeighbors(faces);
            //That only found our solid neighbors. We're not folded yet, so these are only the connections done in the actual paper. Let's mark them as such.
            for (int i = 0; i < faces.Count; i++)
            {
                Face face = faces[i];
                List<Edge> solidEdges = face.neighbors.Keys.ToList();
                for (int j = 0; j < face.neighbors.Keys.Count; j++)
                {
                    solidEdges[j].isSolid = true;
                }
            }

            //Now let's normalize all the faces so that the first point of Face #1 is at 0, 0, 0. Not actually needed but nice to have.
            /*Trig.Point3D normalizer = new(faces[0].point1);
            for (int i = 0; i < faces.Count; i++)
            {
                Face face = faces[i];
                face.Translate(-normalizer.x, -normalizer.y, -normalizer.z);
            }*/

            //Time to FOLD!
            FoldAll(faces);

            //After we're done folding, we'll have new neighbors to find!
            CheckNeighbors(faces);

            //Now we know all our connections. The real, solid ones, and the ones that only exist when the cube is folded.
            //We can also figure out how they line up!
            List<Edge> allcubeEdges = new();
            for (int i = 0; i < faces.Count; i++)
            {
                Face face = faces[i];
                List<Edge> cubeEdges = face.edges.Where(x => x.isSolid == false).ToList();
                allcubeEdges.AddRange(cubeEdges);
                for (int j = 0; j < cubeEdges.Count; j++)
                {
                    Edge edge = cubeEdges[j];
                    Edge? oppositeEdge = edge.coincidentEdge;
                    if (oppositeEdge == null)
                    {
                        throw new Exception("Found an orphaned edge!");
                    }
                    Face oppositeFace = oppositeEdge.parent;
                    int index1 = face.edges.IndexOf(edge);
                    int index2 = oppositeFace.edges.IndexOf(oppositeEdge);
                    edge.indexOffset = index2 - index1;
                    oppositeEdge.indexOffset = index1 - index2;
                    //Console.WriteLine($"{face.ToString(faces)} -> {oppositeFace.ToString(faces)}: Delta {edge.indexOffset}");
                    //Console.WriteLine($"{oppositeFace.ToString(faces)} -> {face.ToString(faces)}: Delta {oppositeEdge.indexOffset}");
                }
            }

            //All done here, time to unfold!
            FoldAll(faces, true);

            //One last problem: We made all our faces 1 x and 1 y too big, so they would overlap eachother nicely.
            //Let's shrink them back down now, so they match the actual squares on the board.
            for (int i = 0; i < faces.Count; i++)
            {
                Face face = faces[i];
                face.point2.Translate(0, -1, 0);
                face.point3.Translate(-1, -1, 0);
                face.point4.Translate(-1, 0, 0);
            }


            return (grid, code, allcubeEdges);
        }

        public static void FoldAll(List<Face> faces, bool inverse = false)
        {
            List<Face> foldNext = new() { faces[0] };
            List<Face> doneFolding = new();
            while (foldNext.Count > 0)
            {
                Face face = foldNext[0];
                foldNext.Remove(face);
                doneFolding.Add(face);
                foreach (Edge edge in face.edges.Where(x => x.isSolid == true))
                {
                    Face faceOther = face.neighbors[edge];
                    if (doneFolding.Contains(faceOther))
                    {
                        continue;
                    }
                    face.Fold(edge, inverse);

                    foldNext.Add(faceOther);
                }
                doneFolding.Add(face);
            }
        }

        public static void CheckNeighbors(List<Face> faces)
        {
            for (int i = 0; i < faces.Count; i++)
            {
                for (int j = i + 1; j < faces.Count; j++)
                {
                    Face faceA = faces[i];
                    Face faceB = faces[j];
                    faceA.UpdateNeighbor(faceB);
                }
            }
        }

        public class Edge : Trig.Line3D
        {
            public bool isSolid;
            public int? indexOffset;
            public Face parent;
            public Edge? coincidentEdge;
            public bool isHorizontal;

            public Edge(Trig.Point3D point1, Trig.Point3D point2, Face parent) : base(point1, point2)
            {
                this.parent = parent;
                if (point1.x != point2.x)
                {
                    isHorizontal = true;
                }
                else
                {
                    isHorizontal = false;
                }
            }

            public bool IsPerpendicularToDir(int dir)
            {
                if(isHorizontal && (dir == DIR_DOWN || dir == DIR_UP))
                {
                    return true;
                }
                if (!isHorizontal && (dir == DIR_LEFT || dir == DIR_RIGHT))
                {
                    return true;
                }
                return false;
            }
        }

        public class Face : Trig.Rect3D
        {
            public List<Edge> edges;
            public Dictionary<Edge, Face> neighbors;

            public Face(Trig.Point3D point1, Trig.Point3D point2, Trig.Point3D point3, Trig.Point3D point4) : base(point1, point2, point3, point4)
            {
                edges = new() { new Edge(point1, point2, this), new Edge(point2, point3, this), new Edge(point3, point4, this), new Edge(point4, point1, this) };
                neighbors = new();
            }

            public void Fold(Edge edge, bool inverse = false)
            {
                Edge? oppositeEdge = edge.coincidentEdge;
                if (oppositeEdge == null)
                {
                    throw new ArgumentException("Could not find our opposite edge!");
                }
                Face oppositeFace = oppositeEdge.parent;

                List<Face> tempBlacklist = new() { this };
                List<Face> affectedFaces = new() { oppositeFace };
                oppositeFace.ConnectedNeighbors(ref tempBlacklist, ref affectedFaces);

                Trig.Point3D foldStart = new(oppositeEdge.point1);
                Trig.Point3D foldEnd = new(oppositeEdge.point2);
                Trig.Point3D vector = new(foldEnd.x - foldStart.x, foldEnd.y - foldStart.y, foldEnd.z - foldStart.z);
                //Console.WriteLine($"Folding {affectedFaces.Count} faces attached to {this} through {oppositeEdge}");

                int degrees = inverse ? -90 : 90;
                for (int i = 0; i < affectedFaces.Count; i++)
                {
                    Face toFold = affectedFaces[i];
                    if (vector.x != 0)
                    {
                        toFold.RotateX(Math.Sign(vector.x) * degrees, foldStart);
                    }
                    else if (vector.y != 0)
                    {
                        toFold.RotateY(Math.Sign(vector.y) * degrees, foldStart);
                    }
                    else if (vector.z != 0)
                    {
                        toFold.RotateZ(Math.Sign(vector.z) * degrees, foldStart);
                    }
                }
            }

            //Recursively finds all faces connected to us, except those blocked by blacklist (basically DFS)
            //The output is done through the referential list
            public List<Face> ConnectedNeighbors(ref List<Face> blacklist, ref List<Face> faces)
            {
                blacklist.Add(this);
                foreach (Edge edge in edges.Where(x => x.isSolid == true))
                {
                    Face neighbor = neighbors[edge];
                    if (blacklist.Contains(neighbor))
                    {
                        continue;
                    }
                    faces.Add(neighbor);
                    neighbor.ConnectedNeighbors(ref blacklist, ref faces);
                }
                return faces;
            }

            public void UpdateNeighbor(Face otherFace)
            {
                foreach (Edge edge in edges)
                {
                    if (neighbors.ContainsKey(edge)) //We already found our neighbor before, proceed
                    {
                        continue;
                    }
                    foreach (Edge otherEdge in otherFace.edges)
                    {
                        if (edge.Coincident(otherEdge))
                        {
                            neighbors.Add(edge, otherFace);
                            edge.coincidentEdge = otherEdge;
                            if (otherFace.neighbors.ContainsKey(otherEdge)) //They already found us before, proceed
                            {
                                continue;
                            }
                            otherFace.neighbors.Add(otherEdge, this);
                            otherEdge.coincidentEdge = edge;
                        }
                    }
                }
            }

            public string? ToString(List<Face> faces)
            {
                return $"Face #{faces.IndexOf(this) + 1}";
            }
        }
    }
}
