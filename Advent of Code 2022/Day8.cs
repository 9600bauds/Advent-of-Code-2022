using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Permissions;
using System.Text;
using System.Threading.Tasks;

namespace Advent_of_Code_2022
{
    internal class Day8
    {
        //https://adventofcode.com/2022/day/8

        public static string GetTreeGridString(List<List<int>> treeGrid, string separator = "\r\n")
        {
            string output = "";
            for (int i = 0; i < treeGrid.Count; i++)
            {
                for (int j = 0; j < treeGrid[i].Count; j++)
                {
                    output += treeGrid[i][j].ToString();
                }
                output += separator;
            }
            return output;
        }

        public static bool IsTallest(int treeHeight, List<int> treesToCheck)
        {
            foreach (int t in treesToCheck)
            {
                if (t >= treeHeight)
                {
                    return false;
                }
            }
            return true;
        }

        public static int TreesVisible(int treeHeight, List<int> treesToCheck)
        {
            int treesVisible = 0;
            foreach (int t in treesToCheck)
            {
                treesVisible++; //Believe it or not, yes, even if a tree is blocking our sight, we CAN see it
                if (t >= treeHeight)
                {
                    break;
                }
            }
            if (treesVisible == 0) //might happen if we hack the program to check trees on edge too
            {
                treesVisible = 1;
            }
            //Console.WriteLine($"Scenic score for tree {treeHeight} vs  {string.Join(",", treesToCheck)} is {treesVisible}");
            return treesVisible;
        }

        public static void Run()
        {
            //string input = "30373\r\n25512\r\n65332\r\n33549\r\n35390";
            string input = "300030213213113240234210203330153124541151003015456312312442524531405533542450111443312103110220211\r\n133000004421300341005340432514034555543556261543410250030436135103304323425502113341331442032311030\r\n213121312230422241205230130541010120012561656126511652636160154566425231221254515542342023142010133\r\n210020103232311410025023513110540633654032560666266266442224400244155120504322112255323444432301210\r\n300221311013444150512444105105055122104524660253365233115442634642236455351502043504233200041232000\r\n000000011130235121555143014441555205423003555504400645452656322632050035240315440035451003103431431\r\n012142333141321404105321351332544222551046221101044054031533500165110422142125530252401331243211232\r\n020213033022012453014033014405001564353352011316633456214232621532251606161624054400501054130430422\r\n042314012030233125141141244243333123002627374716422264424361631360462131201236611502353523210122300\r\n211224020402441314100154352420322456122364263545772174674761655261311042611615130513350241030243433\r\n314424032332214322125462603406635133652272743472434161773175755665106156425610245350415311352303020\r\n430442043211531134103213404455524724321332213636522224572442553173311265220261503235505013340341232\r\n001001325232413003110430361654232165433226632435251776357256175725724566400520111500101504331132114\r\n334412500412200403511523220032572737752127755542727442166375451622531763242464326501020110104340144\r\n121243523444032105062316052754715461676111661333423221122752355145371142754413605365235134243015313\r\n242330445052105423412660066474767425155231852584272588286671442475372464535465114141632114402431330\r\n122050043214212560234014261446673143437367834853285853825877263146536255554162263165412530555001012\r\n310254352155555362305652565245733333847537568334443567664745527772362543753627625001150411055105112\r\n025031121433111201225651315747477674878824738825265832254676344282526441156537710545602456542112210\r\n105541425514161020436715372516214235452255778656548556525666534284848751622646711602335633004210430\r\n120403544243300210571653423576358224736356674473762873838666826244548367625153434754030101342121403\r\n432020535536321653451132344347283847864642562823856582222257783373625252524642355422611066341041555\r\n105515504230051446254242173357243344432244287653558393463636636527332375861462227252610460111541451\r\n424315140455252444231317616735826624757676779939449898765575452676252735247362276562636111623005500\r\n021423534431553132473112715725478325366953865554356694548876447733778524336511267122410032353204044\r\n445423066641156261422146768782747848378447486547353679545953363787428372464325267535533614266344140\r\n152411666100126757726562222726546749954446865366696449877979478486373233467373175176717065434502141\r\n140202601300054474441768586442348397689388764774948539945648798559996563788746555346275261454103223\r\n544203021060377313252177225245274373949438556349734495443338667684563463227487637566451205231151234\r\n225400103300571274173335762334287864949875576664869759876374397685438976626326425644665160321405114\r\n230314645445261324544678872478778643594945995976689844475579675835534645236636838337776723535345500\r\n150534014520772265552634657365463588877484555578696496798458453663473396824266754637171242001256124\r\n501401625205514213726356888877344586367477569695884664945598775858874867554835685452612772106263532\r\n003545414654644264168635752867577699868859699658765954768468556893987864886348334776371465025135140\r\n251042560617345355567763755683459686855588797756945758776799955744646686687652842535676751665034401\r\n302210131663435613688532374877833645976757884777578755957476749797784636464388672831672655516160250\r\n111065246313516415337376337787538574959786899487589688777994584659853384389926247746333354700561235\r\n110414613452245538424336745356686988599756856889899665657755876955474687659467286778227144340035665\r\n412353204671232672374342364957877787589988865788855789958795889895469566379993753537827253655122163\r\n220455060636641757662657656485887468555667756998687885558888697575769544353438542486665473665353031\r\n061302402574166188357244985755358964658897589996959669756655586556668978665737857647731571412663614\r\n451215265723364666667225569887469777655996787798658577588667964644965767693668287254634774752440436\r\n301215542714677435434258733978685986666878695679857768798658676786669569956767732852857361576404432\r\n154623106155526744253836847466987985777579987895579899887867686679478588489549787628542237217621402\r\n016326557476722738858767965394776546697557589788987986685897875855497888993584977357781252535652100\r\n516434443771523825524465875344974794885887577968879977777596685889766469448884476765464722367346613\r\n663333275643147748552476447559494596988869978768877866788776955886649886647734953675545514515635060\r\n564446265661363787884698458539864897955876879789888686667667695889588654946548558665552464445515100\r\n444635271445544486468235896595657574556796676868879879878987585894795697656985562654886247765264633\r\n462165473462113357828755539386966448779857797769787979697957598754959785656563752733766632117233453\r\n324114033531125766355764993645548777979758996876999867877675777569547846779389355565826361114230641\r\n224200317716278667488649555774497597689687678896896677969958769969794969974689727365357612457234644\r\n402622076242363764226695388365948877677669866868687967866668896555954488854868827247567131532732161\r\n351431525533425423868437845597564857555568597698676776879667799897879746844566636356646565257121003\r\n225616611661632445584357877765956764697568598699686698997669677996868665573893357436745717575725454\r\n464505117521646733487884876599599666866788675666888876875979598579854747435497874323277332541546013\r\n052114137625735662285578885579794999468569858977677679667685665987955489696478687578266127111546664\r\n316613323223637567683247984347647849968985558977789767985598956679896995585799768687622276617221641\r\n150200045167123286782287837679577787677797988695867797789687586558667574856533357756471257515363540\r\n252244417323233175887456579833456748749996686798597998557665769755856789834546748233733443273254100\r\n356160635747716144466869844679547594648877886665966889699566759455979998476485752287252722716164416\r\n425166022644275152644747799869954648746958878589556668589768447767896344585634858425817452170565306\r\n345366062117166733576545864397534485854779888658678987596689784695568398698547735888734716543316365\r\n533535636242332164847587898599999846566885656697676699688759667965889473655654364846464567176441222\r\n145156433556112342733574868953399368585597766648768658747699944777476969449428537232155673534436334\r\n054406066337214353545756523343684448899669455797588778689784798466937584849358665356646637313111401\r\n254230005511427461268747424696354657897679767675549867458844878496487636435757334231367213603232112\r\n555355424332316775464478853457754765559478879676449464477968898464959946683563372221445526535034024\r\n414023123606577152476576548378794456898548667574545479875668799757679333543655778735436732625602102\r\n103425425660432324255388475439558538899897884857688985496679573943943844375486647275716474356544432\r\n452130224302617716756636522262934655383939784956995477695867446373399748438345254577364313526363420\r\n000042112640363475341785644528248693738497465445788948789539367488865954668672787612122734016622455\r\n023111166642052271313457755228576545698943896555698897675589438943493564742233477111247522056555041\r\n204431055441351336464513762857847353357853376696786639733989764484974246522527515321225331245432343\r\n411113064641332752327456644465236399895559367589866764738365755795443834767856231524273551544613205\r\n002003415151314635554646457575673343677789786935595493666738344866563385573637543752334431304230033\r\n232000241320312557743676572825328454583544756367648459896978649838474485587354722365706253422641104\r\n140032334604361016614454563867878852473268539588353455546354984764388862653617247612502644151343100\r\n230313534421421354553535613177284354853423658747835975969372246355755687417111117262662010635050245\r\n455442045443411622436616447216784738377874843272575735853775463446344736154635424345111430260111355\r\n015553515233634200652274644243776752756254628443363283782332853857876372453144557606024162435425502\r\n414231425344640401425671247313254225752325627774572863823427628435276621555353276003524346445135344\r\n444014215230466136522431711445473522537227372726657772534226483275376766662531115626523414452105414\r\n433450111244440640533563144151113117278453728882746574687858827886235133216737041020563315330400051\r\n043413224423155241164263423653444422516645633847447523577743865447652437564632624466116150042552500\r\n034343233153545155011601574561726663612576786744276243622471222711311674626123164654601253202230221\r\n334424544214152026360221522751357747561434577416644336551153665531545226246342213505320031201441042\r\n444213310102503010334251632366652423612713524641262137252252513732611325223401240210534434334020134\r\n113234310313013130034263432336443446455536236436221526156612252522132633100613031453230501112202424\r\n142402332004051013660101510101263126711727662153761423762243333777317301206400030653210431512111444\r\n411034340051512350022551420314334411275415543216224154457677376654154362121625361111251523342230021\r\n401212212311255150514520514410354360022337233263271545513775531712533425164554033545254524043033243\r\n040034023233143153232242654250224010246422671266544421771125320425056106225340103411544104041430023\r\n202210233034441525003330614323226104160433060432454154126634040116105426512145204401511210203422322\r\n011431432013322542545215145526600364414641235513425454443064214552663664101101323545031512031302333\r\n020023210301103025401200032420642652143243335333016204055261530250106466135400230513140242434444003\r\n310203111441432251152455421244135150164323516554016042002411655305545265404525521215102013341240121\r\n012320311100031143153052200224256541012135453345356532252242115324133425054343145333123421144111230\r\n311310344433212432240252542030050542510636225454204032233645040015025321421052152330422440232330022";
            List<string> inputPerLine = input.Split(new[] { "\r\n" }, StringSplitOptions.None).ToList(); //String.Split() only takes 1 char as delimiter. This is how you split by a string according to StackOverflow.

            List<List<int>> treeGrid = new List<List<int>>();
            foreach (string line in inputPerLine)
            {
                List<char> lineChar = line.ToCharArray().ToList();
                List<int> listInt = new List<int>();
                foreach (char c in lineChar)
                {
                    listInt.Add((int)char.GetNumericValue(c));
                }
                treeGrid.Add(listInt);
            }
            Console.WriteLine("Starting tree grid:");
            Console.WriteLine(GetTreeGridString(treeGrid));

            int gridHeight = treeGrid.Count - 1;
            int gridWidth = treeGrid[0].Count - 1;
            long treesVisible = 0;
            long highestScenicScore = 0;
            string highestScenicScoreBlurb = "";

            for (int row = 0; row < treeGrid.Count; row++)
            {
                for (int col = 0; col < treeGrid[row].Count; col++)
                {
                    if (col == 0 || row == 0 || col == gridWidth || row == gridHeight)
                    {
                        //Console.WriteLine($"Tree on edge!");
                        treesVisible++;
                        continue;
                    }
                    int tree = treeGrid[row][col];

                    //Console.WriteLine($"Checking tree {row},{col}; which has height {tree}...");

                    ///up
                    List<int> treesToCheckUp = new List<int>();
                    int heightToClimb = row;
                    for (int i = 1; i <= heightToClimb; i++)
                    {
                        treesToCheckUp.Add(treeGrid[row - i][col]);
                    }
                    ///down
                    List<int> treesToCheckDown = new List<int>();
                    int heightToDescend = gridHeight - row;
                    for (int i = 1; i <= heightToDescend; i++)
                    {
                        treesToCheckDown.Add(treeGrid[row + i][col]);
                    }
                    ///left
                    List<int> treesToCheckLeft = new List<int>();
                    int widthToGoLeft = col;
                    for (int i = 1; i <= widthToGoLeft; i++)
                    {
                        treesToCheckLeft.Add(treeGrid[row][col - i]);
                    }
                    ///right
                    List<int> treesToCheckRight = new List<int>();
                    int widthToGoRight = gridWidth - col;
                    for (int i = 1; i <= widthToGoRight; i++)
                    {
                        treesToCheckRight.Add(treeGrid[row][col + i]);
                    }

                    //Console.WriteLine($"Calculating scenic score...");
                    long scenicScore = 1;
                    string scenicScoreCoords = "";
                    foreach (List<int> direction in new List<List<int>> { treesToCheckUp, treesToCheckDown, treesToCheckLeft, treesToCheckRight })
                    {
                        int thisScore = TreesVisible(tree, direction);
                        scenicScore *= thisScore;
                        scenicScoreCoords += $"{thisScore},";
                    }
                    //Console.WriteLine($"Scenic score is: {scenicScore}");
                    if (scenicScore > highestScenicScore)
                    {
                        highestScenicScore = scenicScore;
                        highestScenicScoreBlurb = $"Tree {row},{col}; of height {tree}, had a scenic score of {scenicScore}! ({scenicScoreCoords})";
                    }


                    //Console.WriteLine($"Checking {string.Join(",", treesToCheckUp)} upwise");
                    if (IsTallest(tree, treesToCheckUp))
                    {
                        //Console.WriteLine($"Tree is taller upwise!");
                        treesVisible++;
                        continue;
                    }
                    //Console.WriteLine($"Checking {string.Join(",", treesToCheckDown)} downwise");
                    if (IsTallest(tree, treesToCheckDown))
                    {
                        //Console.WriteLine($"Tree is taller downwise!");
                        treesVisible++;
                        continue;
                    }
                    //Console.WriteLine($"Checking {string.Join(",", treesToCheckLeft)} leftwise");
                    if (IsTallest(tree, treesToCheckLeft))
                    {
                        //Console.WriteLine($"Tree is taller leftwise!");
                        treesVisible++;
                        continue;
                    }
                    //Console.WriteLine($"Checking {string.Join(",", treesToCheckRight)} rightwise");
                    if (IsTallest(tree, treesToCheckRight))
                    {
                        //Console.WriteLine($"Tree is taller rightwise!");
                        treesVisible++;
                        continue;
                    }
                }
            }
            Console.WriteLine($"Total trees visible: {treesVisible}");
            Console.WriteLine(highestScenicScoreBlurb);

        }
    }
}
