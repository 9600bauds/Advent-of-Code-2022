using Advent_of_Code_2022.libs;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;

namespace Advent_of_Code_2022
{
    internal class Day13
    {
        //https://adventofcode.com/2022/day/13

        public static string divider1 = "[[2]]";
        public static string divider2 = "[[6]]";

        public static int COMPARISON_EQUAL = 0;
        public static int COMPARISON_ORDERED = -1;
        public static int COMPARISON_DISORDERED = 1;

        public static void Run()
        {
            //string input = "[1,1,3,1,1]\r\n[1,1,5,1,1]\r\n\r\n[[1],[2,3,4]]\r\n[[1],4]\r\n\r\n[9]\r\n[[8,7,6]]\r\n\r\n[[4,4],4,4]\r\n[[4,4],4,4,4]\r\n\r\n[7,7,7,7]\r\n[7,7,7]\r\n\r\n[]\r\n[3]\r\n\r\n[[[]]]\r\n[[]]\r\n\r\n[1,[2,[3,[4,[5,6,7]]]],8,9]\r\n[1,[2,[3,[4,[5,6,0]]]],8,9]";
            string input = "[[[5,1,[],[8,1,3],6],[[7]]],[10,[]],[6],[[],[[0,6,4,10,5],[2,2,9],[4,4],[2,10,4,10,8]],7,7],[[5],5,[[6],[8,2],[5],[]],[9,3,2,[9,4,8,6,8]]]]\r\n[[5]]\r\n\r\n[[[5,3,[],[5,3,10],2],[[5,0,9,1]]],[[[9,0],[9,6,3]]],[[[1],1,[7,6],10],4],[2]]\r\n[[],[[2,[9,2,6,9],10],[[2,8,10],[4,6],[1,6,4,6],[2,10,1,0,6]],6,[7,6,3,[10,6,4,5],4]],[],[2,2,[]],[2,9,[[3,3,9,6],[6,8,7,9,6],10,2,[6,9,8,7,0]],[7]]]\r\n\r\n[[[4,6,7]],[[1,10,8,[7,2]],10],[10],[[3,7,8,[6,7],[]],8,[4,[5,0,9,1],[6,1,2,6,5]]]]\r\n[[[3,[1,8,7,6],[3,8,7,7],[],[8,5]],[[1,8,10],[10,8,9]],8,[[8],9,[],3],[7,9,8,[2,10,7]]],[8,2],[6]]\r\n\r\n[[3]]\r\n[[2,[],[]],[[5,8,[6]],[[0,6,8,10],[]],[[9,6],6,8]],[[],4,2,[0,[1,4,2,7],6],[0,7]]]\r\n\r\n[[[0,2,[10,5,8]],[[],7,[],[5,2,0,1]],6,10],[],[[],8,0,3,[4,0,[8,5,8,3]]],[0,[1,5],[[8,5,2],9,[8,5,2],[9,9,7,8]],5]]\r\n[[0,6,[[5,8,6],6,[1,8,2]],[[],[10],[],3,7],2],[[[],3],7,[6,2,[]],[[]]]]\r\n\r\n[[6,8],[[9,[2,0,7],4,10],[[0,2,10,6,4],8,[7,7,2,8,7]]],[],[6,[]],[[[3,0,6]]]]\r\n[[9,[[],[1,6,1,0,6],[8],[2]],[8,[2,5,10,0,10],1,[7],[6,5]]],[2,[9,0,[1,5,5,0,8]],9,2],[]]\r\n\r\n[[7,0,1,[[2,1],[8],[9,9,4,8,6],10]],[7,[5,[10,5,6],6,[4,10,7,5,10]],[1]]]\r\n[[1,[],[[4]],3],[[[8],[4,5]],[[10],[],[3],[6,2,9],[0,8]]]]\r\n\r\n[[[2,[],4],[],3,[4,[8,0,1,2],[],[4,0,2],[0,7,4,5,6]]]]\r\n[[1,[],[[6],[10],[6,4,6,1,7],[0,7,1]],[],[[1],[0,8,3],[6],[2,5,7,8,10],[5,5,3]]],[[4,5,2,2,[]],4,[[6,1,7,3],8,[0,5,0]]]]\r\n\r\n[[[0,[2,6,4],3,[8,0,10],[5]]],[[[10,4,3,0,3],[3,0,9,3,5],5,[5,7,3]],[2,3],[]]]\r\n[[3,[[5,5,3,10,10],4,[]],7,1],[3],[[[7,7,3,7],10,[9,8,9,9],[],8],6,1,[]],[[1,[8],1],3,[[9,5,4],9,0,[0],2]],[[[1],6],4,1,[]]]\r\n\r\n[[[10,0,[7]],4,6,[4,5]],[[2,4,[0,3,7,10,9]]],[[[6,5,9],[6,9,6,3],[1,8,4,5],8],[9],[[9,3],3,[7,5],7]],[[[]],[[2,5,4],[],[],[0,1,2,2],[5,1,1,7,8]]],[3,6,8,6,[[6,1],[]]]]\r\n[[6,2],[4,[],[[7,7,5,9],8,[6,10,2,0,9]],2,[1,6]],[[[1,5,10,8]],8,0,0,8],[6,4,[[6,4,6,7],4],[[1,3,7,1],[0,2,4,1,10],[1]],10],[]]\r\n\r\n[[[5,[1,6,2,5,5],[3],[7,3]],[[4,6,2,1,2]],9,7],[0,5,10],[9]]\r\n[[10,0],[[2,[7,4,6],9,3,[0,7,10,9,1]],5,[4,[],2,8,[0,8,6]]]]\r\n\r\n[[],[[[],6,9],[[8],[2,5,4,6],[5,6,8],[5,4,4,6],[]],[[2,6,8,1],0,[7,1,9,6]]],[2,0,1,2],[]]\r\n[[[[],[7,5,5],[3]]],[[[6,7,6],[7,1,1]],4,[7,[2,10],4,[2,2]],0,[[7],10,5,4,[2,5,5,2,1]]]]\r\n\r\n[[[[3,4,6,2,6],[],6],[[1],5,[1],2,[5]],10,0],[9,[]]]\r\n[[],[[]],[[[],2,[0,3,9,10],5]],[]]\r\n\r\n[[[[2,6,0,9],[],[],[9,3,2,9],[9,10]],6,[[4,1,6,2],1],[[10,1],[0,5,5,4],[],4,[8,8,0,1,6]]],[[5],6,[[9,4],4,0],7],[9,[],[6,4]],[],[]]\r\n[[[[9,3,0,2],[4,10],[0],[5,5,0]],1,7,[[0]]],[],[[[2,10,10],[6]],6,[7,0,[4,0,8],6,5],2],[],[8]]\r\n\r\n[[1,1,3],[[[],7,[0,5,0,2],[10]]]]\r\n[[],[[[3,4,7],[7,2],[1]],[[1],9,[3,1,3],[3],10]],[[[],5,[2],4],10],[[[2,6,6,8,3],[6,0,7],1],[[8,8,3,0,3],[4,8,10],0],6,[[10],[10,2,6,6,7]]]]\r\n\r\n[[9,2,3]]\r\n[[],[],[[[],[10,8,7,4],0,5],3,7,[6,[1,4,5,10]],1],[[],[1,5,[7,3]],[7,10,[10],[3]],[8],2],[]]\r\n\r\n[1,5,3,3,5]\r\n[1,5,3,3]\r\n\r\n[[8,[[2,6,0,9],[4,9,5,5,3],[8],8,3],[1]],[0,[7,[8,8,8,1]],[],[[0],[8,6,9,9,1],2,6,2]],[],[1,[2,1,[1],8],[],8],[[9,7],[7,10],[[],9,9,7,3],[2,[],6],[[],5,[7,6,7,6,0],[3],[3,10,10,10]]]]\r\n[[[[8],1,[1,1,3,5,1],[0,3]],[],4,0,5],[],[3,3,[9,4,5,[4,2,3]],7,9],[7],[[[2,1]],[[2,9,10,0,6],[3,0,8],[0,3,2,9,1]]]]\r\n\r\n[[[[5],7],3,[9,[2,6,0,2,3]],[],3],[4]]\r\n[[10,7,8,[[],[9,10],1],[4,5,[2]]],[[5,[3,9,6,5],[],2],[9,4],[6,[2,4,8,1,7],10],1,[2,[3,6,1,5],1,[5,10],[]]],[9,8],[7,9,4,[5,[4,4,0],[9,10]],9],[]]\r\n\r\n[[2,0,[2,8,10],[[10,9,4,0],[7,6,8,1,9],[2,5,6,9,5],[]]],[8],[6,7,4,[[0,5],4,5,3,[8,6,4,6]]]]\r\n[[[[3,6,5,5],[6,10,3,2,9],[8,7],[6,5,7]],[[3,10,7,10,5],[9],5,[1,9,1,5,5]],5,10,[[2,1,2,3],[1,0,10,1],[1,5,3]]]]\r\n\r\n[[1,7,[9,[2,2,5,4,5],4],[[0]]]]\r\n[[[[8],9,5,2]],[7],[0,8,[1,3,[6,5,10,2,6],9],9],[[[7,0,6,3]],[[2,1,5,9],7,[4,2,1,7],[3,0,0,10],10],[],[[4,9,3],[]],[]],[4]]\r\n\r\n[[1]]\r\n[[[],[9,[4,2],4,8],[8,8,0,[5,8,10],[4,1,7,10,0]]],[0,6]]\r\n\r\n[[2,[[1,7,10,3,10],4,5],6,[[3,9,7,8,5],[]]]]\r\n[[[[]]],[[[5,2,9,7,2],2,5,8],2,9,[5,3],2],[4,[[],4,7,[1,10],[2,1,0,0,8]],4,7],[8,[8,3,2,5,10],[4,[10,4],[2,10,9,5],[2,6],[3]],2]]\r\n\r\n[[[[5,5,2,7,6]],[],[]],[10,6,[6,9,7]],[[[8,1]],[],0,[[],[1,0],[]],0]]\r\n[[4,[[10,1,5]],1],[],[1,5,8,[[6,10]],[[6],9,[0,3],[],[6,3,7]]],[10,[],[[1,4],8,[5,8]],[3,5,2,[],0]],[10,[3,[4,1,6,5]]]]\r\n\r\n[[6,10,[10,[6]]],[8,[[8,8],2,1]],[9,[6,2,[0,0,9,10,9]],1,1]]\r\n[[],[10,[[7,5],[3,10,7,8]]],[[]],[[10,[2,9],8,2,4],[1,[2],[10,5,3],1],0,3],[[[0,4,6]],[[6,0,9]],[[6,4,6,10],[1,8,8],3,7,4],[3,2,[0]]]]\r\n\r\n[[3,5],[[7,[8,2],[9,8]],[[3,1,0,6,10],[],[7,8,1,10]],[[],10,[4,6,7],5,[2,10,7,6,5]],[6,[3,7,8,2,7],5],[[6,3],[7,8,4,0,8],9,[0],[0,10,7,0,2]]],[[],[[4,6,1,9]],3,[],[8,[6,3,4],[5,10,6,0,9]]],[[],9,0,[[1,7,9,10],0,10,4],4],[]]\r\n[[],[[4],[[],0],[5,[4,7,5,9,6],[8,10,0,5,0],10,[1,0,7,6,1]]],[],[]]\r\n\r\n[[2,6,3],[],[[7,[3,9,2,10],2,[10,0,1,3,6]],[3,[3,8,9,7,3],6],[],[[],1,0],8],[8,4,[],0],[8]]\r\n[[7],[10,5],[[[2,6,10,9,1],7,[]],[[4,1,10,4],10,10],0],[2,7,[[9,7],[7,3,9,9],[1,8]],[],[[7,10,4],[5,2,2,6],[],2]],[[8,9],9,4]]\r\n\r\n[[[7,[9,10,1,4,0],[4,10,2,1]],7]]\r\n[[10],[[4,9,3],9],[4],[],[7,[7],[[10,9,8,4,10],3]]]\r\n\r\n[[9,6,[],[],[9]],[8,[4,[1,1,10,8]],1,9,10],[[],[6,4,[9,0,2,6]]],[[4,[0,8],7,[8,1]],5]]\r\n[[2,8],[[[1,6,6],[6]],[8,[2,10],[1,2,6,3,9],[9],4]],[[3,3,[7,0,9,8,8]],[[9,7,7],4,[4,1],[10,3],[]],[[9,8],[2]],7],[],[10,[6,[],7],[[],[5,10],[5,4],2]]]\r\n\r\n[[[[0],[2],3,[4,1,8,8,8]]],[],[[[7,5,3]],[8]]]\r\n[[[[3],0,[0,3,7,1],9,2],[3,2,3,[6]],[],[],0]]\r\n\r\n[[1,4,[]],[0,0,10,10,[]],[[0,[8],[4,0]],[10],[2]],[[[],[7,1,1,10]],[7,[],[8],4,[2,9,3]],[1],[[10,8,10,5],2,[5],[10,10]],[[3,2,1,9,5],9,[5,3,7],3]]]\r\n[[[8],7,1,0],[6,1],[[2],1,[],[7]],[]]\r\n\r\n[[6,2,[],[4,3,5,2,8],[[4,5,4,7],3,[2,9,1,7,0],[7,4,6,6,7]]],[],[10,[[9,10],4],7,0],[4],[3,[],9,8]]\r\n[[[10,[7,3,4,7,6],6,4,[9]],[9,[],8,[6],[5,4,7]],[5,6],[5,2,[3,1,10,0],[9]]],[[1]]]\r\n\r\n[[],[[[3],10,3,7]],[]]\r\n[[],[[],4,[2,[0],0,[]],4],[],[[5,0,10,6,9],2]]\r\n\r\n[[4],[[8,[4,4,3,2]],[],[],5],[[]],[],[[3,6],10,8,[[3],6,7,2]]]\r\n[[7,[2,[2,0,8],[6]],[]],[],[]]\r\n\r\n[[[[3,8,2,9],5,[5,5,5,0],[10,7,1,0]]],[[[5]],[[9,4,5]],[],0],[[],8,2]]\r\n[[0,[8],7],[[0,0,0],[[3,7,9,2]],1],[5,6,[[9],[9,7,2,3,2],[0,8,1,4]],10,2]]\r\n\r\n[[0,[8,[6,6],[0,7],8],4,10],[6,10,[9],[8,[5,2,8,8,6]]],[6,5,9,[]]]\r\n[]\r\n\r\n[[[[],10,[10,9,6,5,5],5],4,2,6],[],[],[],[]]\r\n[[5,[[],[]],[]],[8,[[10,8,6],9,[0,5,6],5],[0,[]],4],[[]]]\r\n\r\n[[5,5,[],6,3],[[[1,9,7,8],[6]],[[6,2,2,10],[3,10,4,1],6,1],0,3,[[1,6,7,5,2],0,[],[9,2,3],4]],[7,8,[[5,1,3],[],9],[2]],[],[[[9,1,4,7,5]],8,[9,0,[1,5,10]],9,[3,[],[],1]]]\r\n[[],[2,[1,0,0,[5,4],[]],[[2,10,7],9,0],4],[[3,10],7,[2,1],[[6],10],[10,[7,6,3,6,9],[10,6,6],[],5]],[6,[[9,3,10,10],[0,7,10,7],5,0],3],[[9,[3],[8,8],[1,6]],[[9,9,4,8,4]],[4],3]]\r\n\r\n[[[0,8,9,[9,4,9],[10,5,0,0]],2],[9],[[[6,8]]]]\r\n[[[0],[[0,1]],6,7,7]]\r\n\r\n[[[[3,9,8]]],[3,[7,[7,7,4]]],[[4],[3,7,[3,10,9,2],2],[4,[8,5,7],0]],[],[[]]]\r\n[[[[7,7],[0,3,9]],6,[7,6],[2,5,[2]]],[],[[[0,5,7,6],[3,5,2],[4,5,6,9],[5,8,10,1,0]],2,[9,[7,10]],4,7],[9,[[9,0,5,9,10],7],9,9,[[10,2,6],[10,5,9],4,1]]]\r\n\r\n[[7,[[0,1,2],7,3,6,[6,8,10,9]],[[1,10]]],[[9,5,3],[[2,0,4,9,8],4,[9]]]]\r\n[[0,4,5,2]]\r\n\r\n[[[[0,8]],[7,9,[4,1]]],[[[7]]]]\r\n[[[[5,6],[6]],[[],[]],[0,[9,6]]],[2],[[7,6,2,5,1],[[1],[9,5,8],[]],6],[[0,2,9,4,7],[3,[5],10,[],[10]]]]\r\n\r\n[[[[0,4,8,6]],3,[9,[9,4,1],[10,0,3],[]],6],[],[],[[[3,8,6,8,3],[],[0],0,3],10]]\r\n[[2,4,8,3,[[10,0,0,7],[1],[10,8],[9,4],[]]],[0,10,4],[10,[2,7,3]],[7,8,4,2,3],[]]\r\n\r\n[[6],[6,[8,[0]],8,[]]]\r\n[[[],10],[2,[[4,10,1,2,10],[1,10,3,10],[],[4,6,1],1],[[4]],10],[4,1,2,4,[[6,0,10,8,3]]],[[[6,2]]]]\r\n\r\n[[[8],[1,5,3],[]]]\r\n[[],[[[7,1,5,2],[0,9],5,[6,8,8,1,4]],[6,[7],5,[],[2]],[1,7,3,[0,8,8,2,8],[4,0,0]],3,1],[8,[[]],[10,0,6,[2,8,1,4,0],8]],[],[3,[[1,6,3,10],1],[],[[5],[10,6,4],[4]]]]\r\n\r\n[[[],[[1],[8,5,5,5,9],[3],[]],3,9],[],[[],[5,[7,4],[]]]]\r\n[[[[1,10,2]],4,[9,[8,6,7,1,4],8],9,9],[4,10,[[4,0,9],[7],5,[]],[7,[2,9,7],[],1]],[[[9,7,9,2],4]],[[1,2,[3,1],[10,9,1,10,10],10],9,3,10,3]]\r\n\r\n[[],[10,[0,[10,10,1,2,10]],1,[]],[[],[[7,5,1,8],2,0],4,[9,5]],[[10,6]],[]]\r\n[[6,[1,8,1,3]],[[0,[2,2,9,8,5],6,[5,2,5]],0,1,7],[[9,[1],0,5,6],3,[9]],[[[3,4,1,0],[5,3,2,8,10],[9,6],[9,5,1,8],2]]]\r\n\r\n[[7],[[9,[10],[4,9],5],[2,[6,0,1],4,3]],[9],[[]]]\r\n[[[3,[],[6]],[10],0,[[6,5,8,0,1],[8,9,4,7,0]],[]]]\r\n\r\n[[4,[[],[],[7,4,8,3]],[],[[4,7,7,0,5]],[5,7,7]],[9,[],[[8,8,8,5,9],7,[5,3,7,10]]],[[7,[7],4,[],[9,5,6,10,9]],[10]]]\r\n[[6,[[6,10,10],[5,3,10,7]],[10,9,[4]],9],[7,[]],[[[9,2,0,3,0]],9,[[1,6,9,6],4,[9,2],[2,9,7]]]]\r\n\r\n[[],[[[4],8],4,[8],[2,3]]]\r\n[[10,[[0,8,10,6],2],[[8,5,6],[2,4,2,9],[2],7]],[],[[7,4,[9,5]],1,0,[[0,8,4,3,7]],8],[[4,9,2,[6,8,3,6,2],10]],[]]\r\n\r\n[[[],0,4],[10,8,[],6,7]]\r\n[[2,[5,7]],[10]]\r\n\r\n[[[[3],8,4,[6,8,7,3],9],[[9,9,10,4,2],3,[0,8,2]],9,[]],[9,6],[6,[[4,9],2],6,[[],[9,0,6,6,6],[6]]],[[2,[8,9,7,8],10,10],[]],[]]\r\n[[[[1,7],[4,8,9,1,9],[3,9,5,3],5,8],2,1,[6,5],7],[]]\r\n\r\n[[7,0,[4],[[6,7,3],7,3,[6,4,3,5,6],4]],[],[2,[[],[0,0]],[[0,3,3,4,5],5,3,[7,9,8,3,3],6]]]\r\n[[8,1,1,[0,[],6,[7,5]],10],[[]],[3,[[0]],8,0,2],[7,[0,[2,7,4],1]],[[],[],3]]\r\n\r\n[[1,6,[]]]\r\n[[[[]],[10,[6,1,4,2,10]],[[7,2,7],1],[[3,8,5,2],[3],[10],8,10],0],[2],[[[7,8,5],2,9,[4,0,0],[]]]]\r\n\r\n[[7,[6,10,5,5],1,5,[[2,7,3],7,1,9,5]],[[2,2,[8]],[],[5,9,0]],[[9],6,[[4,7,1,0,5],5,9,[3,10]]]]\r\n[[0],[0,9,[1,10,10],3,[[8],[0],[],[3,8]]],[4,1,1,8,[[0]]]]\r\n\r\n[[[]],[[[1,9,8,5,8],[3,2,10,7,10]],[[1,8,4],1,[9,3,10,0,4]],0,4],[3,2],[4,4,[[10,0,9,1],[],6,[3,10,8,0]],7,4],[4,[],2,[[8],0,[10,2]]]]\r\n[[10],[[[2],[0],[]],5,[4,[4,6,6,2],[0,9,10,8],[10,3,4],0]],[6,4],[7,[[3],[4,8,5,1,5],7],[5,[8],10],[5],[1,[4,9,10],6,10,9]]]\r\n\r\n[[],[6,3,5,5]]\r\n[[6,6],[[[6,9,5,0],10,[9,3,2]],[2],[]]]\r\n\r\n[[4,[[],1],3,[[3,4,0,6,0]]],[6,9,5,4],[[6,0,2,[]],[[10,3],[5],1,[3,2],[10,10,2,0,4]]]]\r\n[[[[0,5,7,2,1],[1,0,7],[1,8]],10],[9,10],[[0]]]\r\n\r\n[[[5,[8,0,0],[4,1,10,3],0],[[5,4],[8,10,9,5],5,1],7,3],[],[9,[5,[4,8],[8,1,5,3,2],[1,4,6,1,5]],[[1,5,1,2,4]]],[[10],6,[],3],[[[0,9,7,4,3],9,[6,5,5,2,5]],8,9,5]]\r\n[[[[9,10,2],[6,8],6,[8,2,3]],4,[]],[[1],[10,[10,6,9],8,[9,9,4,7]],[[3]]],[],[6,[[],[4,9,5],[],9],[[8,2,6,1,6]],[[2,8,8],10,[5,9,0],[1,1,6,6],[9]],8],[]]\r\n\r\n[[4],[9,[7,[7,7,3,10,1],6],0],[2,5],[[],1,9,[]]]\r\n[[[],[],[3,[6,4],[7,3],9]],[[3,[6],1],[[],8,1],4,[5,4,7,4,[5,10,1,8]],[10,7,0,4]],[[2,[9,3],[10,2,2,5,1],7,[]]]]\r\n\r\n[[[[2,6],[4,9,6,1]],[[5,7,9,4,10],[8],7],[0],[5,8]]]\r\n[[[1,2,4,[1,1,2,10],10],1]]\r\n\r\n[[10,[]],[6,9,[],2,[5,[5],[4,4,1,2],[9,0,5],[]]]]\r\n[[],[[7,10,[3,10]]]]\r\n\r\n[[1,[[7,6,5,4,10],6,3,[10,8,1]],[[5,0,1,4],[8,8,4]],[10,[2,4,4,3,8],[10,8],2],4],[[],[6],[1,6],0],[[[4],[6,5,7,10]],9,[]]]\r\n[[],[1,0,2,[8,[8,0],10,5]],[[[9,1,4,4,6],8,8,1,5],[3,10,8,3],[]]]\r\n\r\n[[[],[4,7,8],[3,5,1,10,[7,2,5]]]]\r\n[[[[8,8,10,8],[9,5,2,4,5],[5,2]],[]],[2,9],[[4,[3,0,7],[2,1,3]]]]\r\n\r\n[[[10,7,9],3],[[2,[6,8,10,0],9,10,[]],[],1,10,[2,[8,8,10,10],10]],[[[8,7,5,4]],[[],7,[4,9,2,0,4],[0],1],7,2],[],[[8],[[0,0,7,8,1],2,0,[]],[[0,9,6,7,4]],[4]]]\r\n[[[],[[6,1,9,1]]],[[7,[]],2,4]]\r\n\r\n[[7,10,9,10],[[[6,8,7]],10,10,[10,[1,7,1],9,7,[7]]]]\r\n[[[],[7,8,[0,10,7,5]],10],[8],[[],[[],6,10,[],[9,10,10]]]]\r\n\r\n[[3,[],[]],[[[9,2,3],[6,8,9,5],[0,6,7,6,7],0,10],10],[],[],[3,[[0],[6,7],3,[1,2,10,2,9]]]]\r\n[[],[3,[[5],6,[1,3,1,5],[5,9,4]],[4],[],9],[0,9,10],[[4,8,[8,6]]],[[]]]\r\n\r\n[[[7,[5],[1],[4,8,4,2,2]],8,1,0],[[5,[10,7,8,0],[7,4,9],[9]],1,4],[9,[],[10],3,2]]\r\n[[5],[[2]]]\r\n\r\n[[1],[],[]]\r\n[[[[9,7,5,10],1],[],[]],[4,[0,[4],5,2,8],8],[[9,[1,0],3,0]],[8,0,[6,4,[10],5]],[[9,[6,3,1,0],[8,8]]]]\r\n\r\n[[8,5,[9]],[2],[9,[],5,5,8],[3,5],[0,6,[],8,[3,0]]]\r\n[[10,10],[6,[[0,7,6],8,[0,4,8,1]],0,4,6],[3,10,[5,7]],[[3],[[10],1,5]]]\r\n\r\n[[2,[[9,10],[1,8,8,6,1],[]]],[[[],2,[7,6,9,2,4],[],10],[[8,7,1,10,4],9,[5,4],0,1],[0,[2,2,9,0],9],9,4]]\r\n[[[6,1,1,[3,8],[9,4,3,6,8]],7,4,[]],[9,[],[[10],[8,8,3,1]],3]]\r\n\r\n[[[[8,4,5]],5,[5,2,[3,1,10,8]]],[[[2,7,8,2,0]],[[3,10,4,4],10,0],6,9,3],[[],[10,1,1,[]],10,3]]\r\n[[[[7]],[],9,4],[[7,5],[],[[7,4,2],[8,9,2,0],4,1,[8,9,2,8]],1,[[6,5,6,5],[5],[],1]],[]]\r\n\r\n[[[9],[8,8],10,[[6,5,0],3,6,[10,4],[10,4]],[10,[10,0,7,4,5]]],[]]\r\n[[3,[4,[],6]],[0]]\r\n\r\n[[],[6,[7,9,9,[],2],[[],[5],10,3,7]],[2,1],[],[[],[[],4,[3],0,1],3,10,[9,0,5,5,0]]]\r\n[[[6,[6,2,0,10],0],[2,[9,4,8,0,6],[10,8,7,4,2],[],[]],0,0,[6,2,10,[6,7,10,1]]],[[]]]\r\n\r\n[[[[2],4],6,8,4],[2,[[8,8,3,8]],[[9,8,10],[2,2,4,7]],[5,[2,8,7],4]],[[[]],[[2,1,2,9,2]],[[9],[6,10,0]]]]\r\n[[[[10,6,1]],[],[],[2,[2]],6],[[5,[0],[9],0,0],[3],5,[0,6,[3],10]],[],[[[],4,1],[4,0],2,2,[4,0,[2,6,4,5],10,[10,6]]]]\r\n\r\n[[[],7,[2],[9]],[[],[[0,9,6],[0,5,4,5,2],[],7,3]]]\r\n[[],[10]]\r\n\r\n[[[[],[7],[2,5]],3],[4,1,1,6],[]]\r\n[[]]\r\n\r\n[[2,[[],[5],10,[7,10,5,6],[9,8,7]],[[8,9,4,10],0],[],[[0,7,8]]],[[9,3,0,2,7],1,[5,[3,10,7,7,2],[],[0,8,2],[3,0,6]],[],0]]\r\n[[[7],8,10,[[5,6,2,5]]],[[3,[]],8,[[],4],4],[[],[[9,0]]],[[[4,5,6,3,0],[6,1,4,2],[0],[7,10,3],7],[[5,2]],5,[[1,1,4,10,7],3,[1]]],[[8,[],[8],2],[8,[0,7],[10,8,9,4,4]],[5,[10]],[],5]]\r\n\r\n[[2],[9,8,4],[7,9,4]]\r\n[[3,[[],3,[1,6,8,1,6],[],[3,3,10,6,8]],1,8,[0,0,[1,7,2],[0,0]]]]\r\n\r\n[[10,[0,3,[8]],10],[],[[8,[],1,[5,0,6]]],[1],[4]]\r\n[[[[7,1,10,4,9]],1,[]],[[[4]],8,9,5]]\r\n\r\n[[7,[3,6,6],7,[[9]],[[5,8]]]]\r\n[[],[[6,9,4,5],[0],[],4],[[9,[3],[5,1,5,9],3],[]],[[0,10,[5,4,6]],[[0,3]]]]\r\n\r\n[[5,[0],0,[5]],[[[],[6,9,1,4,9],6,[9,9],[2,1,6,2,2]],5,10,[[0,9,6]],7]]\r\n[[8,1,6],[10,[4,[2,5,3,2,2],[6,1,3,3]],5,[[10,4,7,1],[9,2],1]],[9,[2]],[],[[[9,6,10],[0,0],[2]]]]\r\n\r\n[[10,0,10],[[[0,6,1],[7,3,5,5,0]]],[0,[[4,7,3,4],[],[3],8,[9,3]],6]]\r\n[[4,[[3],9,[1,3,5,2,5],[9]]],[[6,7],9],[],[]]\r\n\r\n[[[[0,9,4,3],[9],1,[7,2]],[[],1,2,[9,2,1,5,5],[5,5,7]]],[]]\r\n[[[[6,1],9],1],[[[2,6,2]],2,3],[3,6,[4,[9,1],7,[0,10,6]],[1,[10,7],[2,8,7,3,1],[6,5]],[7,2,0]]]\r\n\r\n[[[[3],8,[10,5,9,10,5],5]],[]]\r\n[[7,8,5,6],[[7,[1],[1,9,1],[],4],[[10,4,9,10],[7,1,1,6,3],6],10]]\r\n\r\n[[[[8,7,5],8,[1],7]],[[3]]]\r\n[[[8,[1,0,7,6],[],[1,3,8,3]]],[1,[8,2,[1]],[[4],7,0,5,6],[[],0,0,7,9],4],[6,6,2,6,0],[],[7]]\r\n\r\n[[4],[[0,[9,9],4,0,[2,3]],[3,5,[7,3,8,4,9],5],[2,9,10],[6,[6],5,4]],[]]\r\n[[[6,9,[3,4],0,[]]],[10,7,3,[[6,2,4,10],[3,7],10],5],[],[[10,[9,8,0],0,1,[8,8,9]],[[0,5,1,5,6],7,6],[[8,7,1],10,[0]]]]\r\n\r\n[[10,[[3,4],5,5,8,[1,7,8]],7,[10,[7,1,1,7,0],[8,2,9],9,[]],[[6,9],8,3,[4,7,9]]],[8,8,[[1,1,7,5],[8],1,0,9]],[[[2,10,6,7],[6,10,3,4,6]],[]],[6]]\r\n[[[5,3,[4]],4,4,1,[3,[],4,[4],9]],[[10,10,[2,8]]],[]]\r\n\r\n[[5,8,0,9,6],[],[3],[[[10,3,6,9]],3,7,[0]],[[]]]\r\n[[1,[]]]\r\n\r\n[[9,[[],7,[2],5,[6]],[]],[[6,6,2],4],[],[0],[[5,[3,9,0,2],[],9],[[1],[1,3,1,2,4],6],1,[[7,9],0,[],5]]]\r\n[[],[1,6,8,[4,7]],[[[1,0,4,7],[0]],[[9,8],0,[8,7,8]],[[2,3,2,6,1]]],[[],[[8,4,8],[0,6],7,5],[[7,10,2,6],[5,3,8,10,6],5,2],4,2]]\r\n\r\n[[],[7],[5,10,[[5,10,1,7],[4],8],[[],2,9,[7,2]],4]]\r\n[[[[7,8,3],0],8,2]]\r\n\r\n[[7,2,[[10],[5,2,1,3,8],0,5]],[],[5,[5],3],[[[10,2,6,9],0,[5,8,6,2,3],10,[4,6,10,10,3]],[[10,1,9],1,[0,2,6],4,[7,5,10]],7,[[1,7,4,6]],10],[[[0],7,5,[9,4],2],0,[[],[4,7],[9,2,7,3,4]]]]\r\n[[[],[[1,10,6,1,10],5,10],4],[9,[[]],1]]\r\n\r\n[[7],[]]\r\n[[[[9,2,10,10,7],[1,6,6],[10,0,9]]],[[8,9,4,10,0],[[],5],4],[[]]]\r\n\r\n[[[[9,7,10],9,7,[6,10]],[[8,0,7,2]],[8,4,[10]]],[],[7,[8,[6,3,5]],[7,[0,4,4,9,9]]],[[[4,10,2],[5,7,3,3],[1,4,6,4,2],[8,7,10,7,1],4],[2],3,[[],9,10,[2,4]]],[[[]],[0,[4,7]],[]]]\r\n[[],[7],[10,6,10,[[]]],[9,[[],6],[[4,2,5,5]],[[7,1,9],7]],[0,5,3,10,7]]\r\n\r\n[[5],[0,[[0],10,[1,2]],10,[],8],[[[6,0],6,7,[]]],[2,[8,[7,0,5,5],[0,3,0],[],[1]],2,[2,10,[5,5,3,0,1],0,[1,2]]],[]]\r\n[[],[[3,[],[],[9,4,2,9],[]],[6,9,8,6,[7,9,4,2]],6,0,[[],[10,5]]],[]]\r\n\r\n[[],[]]\r\n[[7,4,[9,3]],[2,[[]],[[4],[1,3],6,[8],8],[1,[8,5],1,3]],[6,0,8],[4,5,2,7]]\r\n\r\n[[[[9],[5,6,7,1],10,9],7],[[[3],[9,7,1],4,[7,9]],5,6,6]]\r\n[[],[[],[8],[9,1,[6,3,6,8,9],[5,7,9,5]]]]\r\n\r\n[[],[5,[[8]],2,[]],[9],[10],[10]]\r\n[[[[4,10],9,[5,9,8,5,3],1],[[5,0,7],[10,10,5,5,4],[9,10,7,6],[1,2]]],[2,7,1,[1,4]],[[],[[2]],8],[8,4,[5,8,[8],[2,10]]],[]]\r\n\r\n[[],[1],[0],[],[6]]\r\n[[],[[5]]]\r\n\r\n[[[[0,6,9,5,10],6,[0],0]],[[7,[]]],[3],[3,8,[[0,3],6,10,[4],[]]]]\r\n[[1,[],8,[[1,3],8,8],[[],1,[8,9],6]],[[[6,2,6,4],[4,5],[3,6,4,6],7,[]]],[2,5],[8,[1,[9,9,9,8,6],[10]],9,[[2,5],7,[5,4,8],3],7],[8,0,[4,9,9,9,[5,6,2]]]]\r\n\r\n[[[5,[2,0,3]],[[],5,4],2],[3,[4],[[2,3,0,6]],9,1],[],[[0,6,1,[1,10,0],5],5,[1,1,5,9,[2,8]],10],[7,[[],[7],[4,3,4],7,[8,8]]]]\r\n[[],[7,10,9,[[2,8,5,5],[2,1,9],4,[],[6,8]],[7,4]]]\r\n\r\n[[[[],[1],[8,9,3,9],8],[[5],5,10,8],[3,5]],[[4,4,10,0],3,[[4,9,3],[6],[6,7,4,7,10],4,[4,9,2]],[10,7,[],[6,4],[7,7]],4]]\r\n[[[[2,5],1,0]],[[[0],10,[2,1,9],[3,7,8,10,7]],7,[[6,7,3],10,0,[10,8,6],[9,9,5,4]],[4,4,3,[7,4,10,4,1],[1]]]]\r\n\r\n[[[0,[9,1,6,7,10],7],3],[3],[[1,10],[[4,3,1,7,10],6,2,[9,3,3]],4],[[6,[]],[2,[9,2,6,5]]]]\r\n[[3,7,[],2,[[],[1,4,9,1,10],0]],[8,[7,1,6],[4,[0,9,4,1]]],[4,[[9,9,2],4]],[2,8,[7,[8],[9],[6,7]],1]]\r\n\r\n[[8,9,[[2,0],[],4,[8]],7,[[10,10],[9,3,1,1],7,6]],[[9],[[],5,[2,1,2,6]]],[[]],[[9,[7,3,2,2],10],4]]\r\n[[[]]]\r\n\r\n[[1,3]]\r\n[[[2,[2,1,9,5,3],1,9],4],[[[2,3,9,5],9,[9,2,4,3],0]],[[[3]]]]\r\n\r\n[[6,5,[[6,4,7,5,7]],[[]]],[[[5]],4],[[2]]]\r\n[[],[5,[[2],8,1,[1,3,7,5,0],6],[[1,4,4,8,10],[2,7,9,9,4],1,0],9]]\r\n\r\n[[[10,[6,0],10,2,7],[[6,1,7,1,6],[],3,[9,8,2,0],10],[2,[8,0],6,0,[6,2,4]],5,5],[[[6,1,5,3]],[[10],5,[]]]]\r\n[[],[10,6,5,10,9],[1,4,8]]\r\n\r\n[[[[1,0,10,3,8],[10],[7,8,3,6],3],[5,[10,6,9],1,8],0,[[],[5],[]],[[7,3,3],0,[0,7,9,0,10]]],[[[3]]],[10],[1,4,[[],[0,1],[9,9,4,8],10,10],[]]]\r\n[[[1,[4,6,1]]],[6,5,8,6],[1,[[6]]],[3,[[1],[]]],[[5,[4,3,10],[6,1,10,1],[7,4]],[[9,10]],[10,3,1,[6,5],[0,5]]]]\r\n\r\n[[1,[5,[6,5],9,10]],[[[1,5,0,5,5],[9,1,6,8],7,7,[7,5]],[[8,10,3,9],3,4],1],[10,8,3,[8,1,9,6],[4]]]\r\n[[7,1,[8,[10,9,0],[4,2],10,9]]]\r\n\r\n[[[[4],[7,3,8],[10,9]],[[8],4,[],[9,9,7,9,2]]],[],[[[],10,4],3,4,1,[9,5,6]]]\r\n[[[]],[[0,[1],7,[1,4,10,7],[10,10,9]]],[[[4,7,0],3,3,2]],[9,0,0,5],[10,[6,8,0,[7,8],7]]]\r\n\r\n[[[4,9,9,6],10,[[],[4,1,4,9,1],7,4,7],[5,[],4],[1,9,[9,1],0,0]],[10,[2,1,[7,3,7]],[0,[1,5,8,6,8],[3,5,2],[9],1]],[4,8,10],[[[],7,1,10,[8,8,5]]]]\r\n[[[]],[[6,1],[[2]]],[[[]]]]\r\n\r\n[0,0,1,4]\r\n[0,0,1,4,10]\r\n\r\n[[],[10,[[4,5,7,1],[9,0,9,0,0],[6,10,1],4],[[2,4,6,0],2,8,[]]]]\r\n[[[7],10,[],8,[[2,7,10,0]]],[10]]\r\n\r\n[[6],[],[9,9]]\r\n[[[],1,[8,[5,7,5,0,10],6,[7,5]]],[[],[],7,5],[[0],[10,4,9],8,[[2],[1,7,0,9],1,[1,3]]],[10,[],[],6,[[0,6,7],10,7]]]\r\n\r\n[[9,8,[[10,10,9,5,10],[8,2,1]],10,5],[2,[9,[1],9],[[4,10,3]],[[4,9,4],9,[4,1,5,10]]]]\r\n[[10,0,7],[],[]]\r\n\r\n[[1,[9,9,2,9],4,7],[10,[6,9,[7,6],8]],[],[[2,2,[6,3],[10,1]],6],[]]\r\n[[3,10],[],[[],[[10],10,[7],[6]],[]],[4]]\r\n\r\n[[4,7,[8,1],[[9],0,[3,6,0,7],9,9]],[10],[1,8,[]],[],[[],4]]\r\n[[4,[1,9,5,0,2],9],[[[4,7,8],[6,0]]],[],[5,[0,[],[2,10,0,2],[1,6],8],6,7],[]]\r\n\r\n[[2,[]],[[[10,9,8,7],5,[],[3],[10,2]],[9,[8,9],[8,1,4,3],4],7,2,6],[[[0],2,9,2,[]],[8,[6,0,7,10],1,1,5]]]\r\n[[[3],[0],[[2,5,10,0],[],9],2],[4,[9,[7],[7,9],[9,2,5,3,6]],4,[[],1,[],1],10],[[[2,10,2,1,3],[3,8,5,3,10],[5,4,5,5],[],6],[[5],5,6]]]\r\n\r\n[[9]]\r\n[[[10],[[9,4,8]],[[],1,[10],[7,1]],[[1,0],[4,2],[1,5,5,3,9],1]],[5]]\r\n\r\n[[[6,5,[2,3,10],9,8],[[],[8,1],3],[[],7,[5,4],[0,1,8,7,0],4],[3],[[2,0,0],1,[4,7,0,4],[],[]]],[4],[2,8,[[4],7,[10,10,9]],5]]\r\n[[5,0],[[1,4,[0]],[[1],[8,7,7,8]],[[7,7,9,1],4,7,6],[10],7],[[],9],[[5,[10,8],0],8],[9,[[8],7,10],[0,[10,3],1,5,3]]]\r\n\r\n[[0,[6,10],[[4,1,9],[],10,[10,6,2,7,3]]]]\r\n[[[[1],[1],[],10],10,9,8,[[]]]]\r\n\r\n[[[],1,[[8,1,9,5],0,10,[1],[9,1,5,0]],6,4],[[[8,2,7,0,6],6,1]],[[[6,3,10]],6],[[],[[5,0,8,10,9],[2]],8],[]]\r\n[[[],5,[6,[0,6,8],[7,5,5,0,6],6,[]],[]],[[],3,0,3,[3,6]],[7,5,[[7,0,6,8],[9,5],[]]],[[[2],5,[1,0,5]],8,4,[[5,10,9],[0,2],10,[2]]],[]]\r\n\r\n[[[2,3]]]\r\n[[[[],[6],[4,9,10,6,3]],4,[]],[],[[],7,[],2],[]]\r\n\r\n[[9,[5,8,9],1,1,6],[[[8,6]],3],[8,[[8,7,10],[]]]]\r\n[[1,7,[7,7,4,[10,0,0],[10,10,10,10]]],[[[],[9,5]],[0,2,[8,4],[],[7,8,2]],[]],[[6,[7,0],[9,1],8,[]],4,1],[]]\r\n\r\n[[],[6,1,[[2,1,10],7,4,[7]],[],0],[]]\r\n[[[],8,[4,[9,9],3]],[]]\r\n\r\n[[],[8],[[[9,3,10],[]],[10,[1,0,1],2]]]\r\n[[[[7,9,3,3,10],4,8,[7,0,2,10,10],4],4,[8,10,[0,1,1]],6,[]]]\r\n\r\n[[[3,8,10],0]]\r\n[[1,[],3,[[5],[2,4,3,5],1,[6,8,6,2],[0,10]],[[6,6,3],[4,4]]],[9]]\r\n\r\n[[],[],[[8,[0,7,9],2]]]\r\n[[6,4],[[6,6,9],[[0,10,1]],[[],0,1,[],3],[[1,4,4,8,4]]],[4,[[3,1,5,7,6],7,[9,3,6,10]],[8,[0,10,1,10,10]],[[8,7,7],[8,2,7,7,8],0],[[7,7,8,5]]],[10,1,5,[[2,5,4],10,[]],1],[[4],1]]\r\n\r\n[[1,[9,10,[7,4,7,9],0,[7]],3,[[1,2,8],[7,6,8],[4,9,8,1,6],6],9],[5,9,7,[[7,2,6,4,8]]]]\r\n[[[[5,2,3],[0,8,2],2],[0,3,[9,1,5,2]],[2,6,6,4],1]]\r\n\r\n[[7,[9,[0,9],5],[[4,3,6,7],7],2,2],[[[0,4,1,8,4],3,[],[]],[],5]]\r\n[[[],[[],3,1,9],10],[]]\r\n\r\n[[3,[8],8,4],[8,3,[[2,0,8,9,0],6,6]]]\r\n[[[7,3,[6,5,5],5],8,6,2],[[[],1,[2,8,5],[],[4,10,9]],7,[],[8]]]\r\n\r\n[[],[[[6,3,8,3],[6,4,7,2,9],0],6,[]],[9,[],6,8,[]],[]]\r\n[[[[],[],1,[0,9,8],3],6,7],[[0,[5,7,3,0,10],0,[],7],3,9,[[6],[3],2],7]]\r\n\r\n[[8,0,[[5,5],[0,2,4],3,[5],[2]],6],[0]]\r\n[[5,10,7,0,[[7,9,10,2,6],[8,6]]],[[6,[9,4,3,1]],[8,3],[[3,6,7,8,6],3,[],[9],[1,2,4,7,10]]],[[],2,9,8]]\r\n\r\n[[],[3,[[4,5,5,9,0]],8,[],[[3,7,8,10,2],7,10,[0,2,1,7]]],[[[2,6,2,0,10]]],[7,[]],[6,[],6,[[2,1,8],7,0],[[9,9,1],[],[9,4,3,1,5],[10,6,3,6,9]]]]\r\n[[4,1,[],10,10],[[5,7],[],5]]\r\n\r\n[[[[],7],4,3,[[],4,[4,8,3,3,3],2,10],[5]],[[7],[10,[],[9,9,3,9],[8,8,5,4],[5,6,4,10]],[7,10,[6,4,0,4],[7,0,0]]],[3,[1]],[3,[[9,8,3,4,9],10,[0,1]]],[[[3,6],6]]]\r\n[[],[9,2,5,4],[[[0,9,2,3],7,[1,10,2],6,10],4,5,2],[[[4,9],[7,1,0,1],4],[[2,2,8],[4,3,10,9,2],4,9,[]],3,7,8],[]]\r\n\r\n[[7],[8,[8,[2,7],7,3]],[],[[]]]\r\n[[],[[8,10,2],8]]\r\n\r\n[[5,[]],[[[4],8]]]\r\n[[[[],7,2,3],9,[],[[1],9,[]],1]]\r\n\r\n[[5],[6,[8,1,[6,7,9,5],9],0]]\r\n[[6,5,2]]\r\n\r\n[[0,[[8,6,3,8],1,6,[1,4],[2,2,1,0]],1,8],[[4,3,[],[],3],6,[],[3,[0,0,7,6]],[3,[],[9,6,10,10,2],0,[3]]],[],[[1,[]],6,[[0,9,6,1,4],2,2],8,[[7],6,8,7]],[3,1,8,9]]\r\n[[4],[[[10,3,10,5,0],[],[5,1,1,9],[9,8],2],2,9],[6,0,[[4,4,5,6,8]]],[[1,6]]]\r\n\r\n[[8,9,7,6],[9,[9,[9]],1],[[],[6,[]],[[2],1,[4,5,8,8,7]]],[0,4,[[4,7,7,0],[10,2],4,9],[[]],5],[4]]\r\n[[],[9],[9],[9],[[[],[],[1,0],[5,10,6]],6,[[9,0],2,4],8]]\r\n\r\n[[],[10],[[[4],[],[5,6],[7,10,5,2]]]]\r\n[[[],6],[[8,3],[2,5,2,[10,7,8,4]]],[[0,1,9,[10,3,7],8],4,3,[[9],7],0]]\r\n\r\n[[6],[],[[[6],[7,5,2,7],[3,7]],1,[[7,0,3],[],[7]],6],[5,5],[[9,1,[0,10,10],[3,0,4,0],3],[6,8,1],2]]\r\n[[[9,10,[1,8,4],10]],[1,[]],[]]\r\n\r\n[[2,[[9,5,4],4,[10]],[[10],[8,9,10,6,3],[6],9,[8,5,3]],[]],[[[9,8],[0,6],1,10,[0,10,4,6,8]],[[9,8,6]]],[3,4,[1,1,2,[1,4,5,2,2]]]]\r\n[[7,[8,[1,8,1,8,8]],[[0,10],9],[],4]]\r\n\r\n[[[[2,0,4,1],2],[3,7,[8,2,1]],4,[[10,3]]],[6,9,[[1,6,9,6,6],4,[]]],[[7,10],9],[5,[[4,2,9,1],[6,6],[4,4,0],[7,2,2]]]]\r\n[[[0,10]],[]]\r\n\r\n[[4,4,4],[1,[10,[],10,6,[8,8,3,7,7]],6],[[0,8,[9],4,[3,6]],[[4,5,3,6,8],4]],[1,[[3],[]]]]\r\n[[10,4,7,[[8,9],7,7,[10,1,2],10],[[9,8],1]],[],[[4,10,[]]]]\r\n\r\n[[[[4]],3,[[9,3,3,8,3],5,[1,3,9],5,[4,4]],[1,[5]],[[6,9,8],2,5,[1,5],4]],[[[],4]],[]]\r\n[[],[[9,1,[5,8],[8,9],1],[[]]],[7,0,[[3],4,5],8],[],[1,[3,[0,0,6],[],[]],6,8,1]]\r\n\r\n[[4],[8,4,[3,6,[],2]],[[[2,10,8,0,5],[7,4,9,5],[5,10,7],[10,2,5,0,7]]]]\r\n[[],[[[3,0],0],[],[[4,4],[1]],[5,[7,7,8,9,10]]],[9]]\r\n\r\n[[],[[[3,9,10],0],[9,10,[10,10,10,2,2],[5,10,0,6,9],6],[9,3,10,7,[2,5]]]]\r\n[[7]]\r\n\r\n[[[],7],[6],[2,8,[5,6,[9,0,2,10,8],3,5],7],[4,9,[[1,10,1,6],3,4],1],[2]]\r\n[[],[[[8,3,0,10],6,0,[10,7,2]]],[5,9,0,4]]\r\n\r\n[[[[1,4],8,10,6],[0],1],[],[5,4,0],[[6,4,6,6]],[]]\r\n[[[8,3,[0,8,4,4]]],[],[[7,[],[3,8,1,1]],10,[[],[],6,[9,7,1,10,9]],[8,[3,2,0],4,[7,9,2,5,3],[9,6,7,6]],3]]";

            List<string> allPackets = ProcessInput(input);

            Comparer<string> comparator = Comparer<string>.Create((a, b) =>
            {
                return Compare(a, b);
            });

            int sumOfIndexes = 0;
            for (int i = 0; i <= allPackets.Count - 1; i += 2)
            {
                Console.WriteLine($"== Pair {(i + 2) / 2} ==");

                string left = allPackets[i];
                string right = allPackets[i + 1];

                int success = Compare(left, right, 1);

                if (success == COMPARISON_ORDERED)
                {
                    sumOfIndexes += (i + 2) / 2;
                    Console.WriteLine($"{left} comes before {right}");
                }
                else if (success == COMPARISON_DISORDERED)
                {
                    Console.WriteLine($"{right} comes before {left}");
                }
                else
                {
                    Debug.Fail($"Comparation failed for {left} vs {right}!");
                }
            }

            allPackets.Add(divider1);
            allPackets.Add(divider2);
            allPackets.Sort(comparator);

            Console.WriteLine($"Sorted packets:");
            Console.WriteLine(string.Join("\r\n", allPackets));
            Console.WriteLine($"Sum of indexes: {sumOfIndexes}");
            int divider1Index = allPackets.IndexOf(divider1) + 1;
            int divider2Index = allPackets.IndexOf(divider2) + 1;
            Console.WriteLine($"Packet {divider1} is at index {divider1Index}, packet {divider2} is at {divider2Index}.");
            Console.WriteLine($"Decoder key: {divider1Index * divider2Index}");
        }

        public static List<string> ProcessInput(string input)
        {
            List<string> output = new();
            string[] packetPairs = Utils.SplitBlankLines(input); 
            for (int i = 0; i <= packetPairs.Length - 1; i++)
            {
                string[] packetPair = Utils.SplitLines(packetPairs[i]);
                output.Add(packetPair[0]); //left
                output.Add(packetPair[1]); //right
            }
            return output;
        }

        //
        /// <summary>
        /// Compares 2 inputs and sorts them based on the criteria for Day 13:
        /// <list type="bullet">
        /// <item>If both values are integers, the lower integer should come first. If both integers are equal, continue to the next criteria.</item>
        /// <item>If both values are lists, compare the first value of each list, then the second value, and so on. If a list runs out of items, it should come first. If the lists are the same length and no comparison makes a decision about the order, continue to the next criteria.</item>
        /// <item>If exactly one value is an integer, convert the integer to a list which contains that integer as its only value, then retry the comparison. For example, if comparing <c>[0,0,0]</c> and <c>2</c>, convert the right value to <c>[2]</c> (a list containing <c>2</c>); the result is then found by instead comparing <c>[0,0,0]</c> and <c>[2]</c>.</item>
        /// </list>
        /// </summary>
        /// <param name="left">Left input for comparison</param>
        /// <param name="right">Right input for comparison</param>
        /// <param name="depth">Do not use - only used automatically to keep track of how deep we are recursing, so we can write verbose debugging info.</param>
        /// <param name="verbose">If true, writes verbose debugging info. If false, works silently.</param>
        /// <returns>0: Packets are equal (should not happen), -1: Left precedes right (inputs in the right order), 1: Right precedes left (inputs in the wrong order)</returns>
        public static int Compare(string left, string right, int depth = 0, bool verbose = false)
        {
            string padding = string.Concat(Enumerable.Repeat("  ", depth)); //Only used for verbose mode logging
            if (verbose)
                Console.WriteLine($"{padding}- Compare {left} vs {right}");

            bool leftIsInt = int.TryParse(left, out int leftToInt);
            bool rightIsInt = int.TryParse(right, out int rightToInt);
            if (leftIsInt && rightIsInt) //They are both integers!
            {
                return Compare(leftToInt, rightToInt, depth + 1, verbose);
            }
            else if (leftIsInt) //Only left is an integer!
            {
                if (verbose)
                    Console.WriteLine($"{padding}- Mixed types; convert left to [{left}] and retry comparison");
                return Compare($"[{left}]", right, depth, verbose);
            }
            else if (rightIsInt) //Only right is an integer!
            {
                if (verbose)
                    Console.WriteLine($"{padding}- Mixed types; convert right to [{right}] and retry comparison");
                return Compare(left, $"[{right}]", depth, verbose);
            }

            //If we've reached this point, we can be sure they are both lists. Unless the input is invalid, and that's not my problem!

            List<string> leftList = SplitTextList(left);
            List<string> rightList = SplitTextList(right);
            int shortestList = Math.Min(leftList.Count, rightList.Count);
            for (int i = 0; i < shortestList; i++)
            {
                //Console.WriteLine($"{padding}- ITERATING! {i}/{shortestList} {leftList[i]} to {rightList[i]}");
                int success = Compare(leftList[i], rightList[i], depth + 1, verbose);
                if (success != 0)
                {
                    return success;
                }
            }
            //A list has ran out of items! Was it the left one?
            if (rightList.Count > leftList.Count)
            {
                if (verbose)
                    Console.WriteLine($"{padding}- Left side ran out of items, so the inputs are in the right order");
                return COMPARISON_ORDERED;
            }
            //Well, was it the right one?
            if (rightList.Count < leftList.Count)
            {
                if (verbose)
                    Console.WriteLine($"{padding}- Right side ran out of items, so the inputs are not in the right order");
                return COMPARISON_DISORDERED;
            }
            //OK, guess they were the same length!
            return COMPARISON_EQUAL;
        }

        public static int Compare(int left, int right, int depth = 0, bool verbose = false)
        {
            string padding = string.Concat(Enumerable.Repeat("  ", depth));
            if (left == right)
            {
                return COMPARISON_EQUAL;
            }
            if (left < right)
            {
                if (verbose)
                    Console.WriteLine($"{padding}- Left side is smaller, so the inputs are in the right order");
                return COMPARISON_ORDERED;
            }
            if (verbose)
                Console.WriteLine($"{padding}- Right side is smaller, so the inputs are not in the right order");
            return COMPARISON_DISORDERED;
        }

        public static string RemoveOuterBracketsIfAny(string s)
        {
            return Regex.Replace(s, @"^\[|\]$", "");
        }

        /// <summary>
        /// Takes a string representing a list and splits it into a list of strings. Only splits the topmost level, does not split nested lists.
        /// For example: <example><code>"[1],[2,3,4]" -> { "[1]","[2,3,4]" }</code></example>
        /// </summary>

        /// <param name="s">The string to split.</param>
        /// <returns>A list of strings, separated by commas at the topmost level.</returns>

        public static List<string> SplitTextList(string s)
        {
            s = RemoveOuterBracketsIfAny(s);

            List<string> split = new List<string>();
            int bracketDepth = 0;
            string tempString = "";
            foreach (char c in s)
            {
                if (c == ',' && bracketDepth == 0)
                {
                    split.Add(tempString);
                    tempString = "";
                    continue;
                }
                if (c == '[')
                {
                    bracketDepth++;
                }
                if (c == ']')
                {
                    bracketDepth--;
                }
                tempString += c;
            }
            if (tempString.Length > 0)
            {
                split.Add(tempString);
            }
            //Console.WriteLine($"{s} has become: {string.Join(",", split)}");
            return split;
        }

        //Homemade insertion sort, unused since I switched to a SortedSet later
        public static void InsertNSort(string s, List<string> arr)
        {
            for (int i = 0; i < arr.Count; i++)
            {
                if (Compare(s, arr[i]) == COMPARISON_ORDERED)
                {
                    arr.Insert(i, s);
                    return;
                }
            }
            arr.Add(s); //If we looped through the whole thing with no matches, it must go at the end!
        }
    }
}
