using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Advent_of_Code_2022.libs;

namespace Advent_of_Code_2022
{
    internal class Day14
    {

        public static int SAND_STILL_FALLING = 0;
        public static int SAND_AT_PEACEFUL_REST = 1;
        public static int SAND_OVERFLOWING_INTO_HARROWING_VOID = 2;

        public static int RENDER_X = 0;
        public static int RENDER_Y = 8;

        public static char backgroundChar = '.', wallChar = '#', sandChar = 'o';

        public static int startingX = 500;
        public static bool expandBoard = true;

        public static void Run()
        {
            string input = "498,4 -> 498,6 -> 496,6\r\n503,4 -> 502,4 -> 502,9 -> 494,9";
            //string input = "508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n521,153 -> 521,155 -> 519,155 -> 519,158 -> 530,158 -> 530,155 -> 525,155 -> 525,153\r\n507,19 -> 511,19\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n507,88 -> 507,91 -> 503,91 -> 503,96 -> 519,96 -> 519,91 -> 513,91 -> 513,88\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n494,34 -> 499,34\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n490,31 -> 495,31\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n497,108 -> 501,108\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n482,25 -> 487,25\r\n521,153 -> 521,155 -> 519,155 -> 519,158 -> 530,158 -> 530,155 -> 525,155 -> 525,153\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n495,124 -> 495,127 -> 489,127 -> 489,131 -> 503,131 -> 503,127 -> 500,127 -> 500,124\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n495,124 -> 495,127 -> 489,127 -> 489,131 -> 503,131 -> 503,127 -> 500,127 -> 500,124\r\n517,79 -> 522,79\r\n498,17 -> 502,17\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n479,28 -> 484,28\r\n478,37 -> 478,39 -> 474,39 -> 474,43 -> 487,43 -> 487,39 -> 480,39 -> 480,37\r\n478,37 -> 478,39 -> 474,39 -> 474,43 -> 487,43 -> 487,39 -> 480,39 -> 480,37\r\n501,19 -> 505,19\r\n507,88 -> 507,91 -> 503,91 -> 503,96 -> 519,96 -> 519,91 -> 513,91 -> 513,88\r\n478,37 -> 478,39 -> 474,39 -> 474,43 -> 487,43 -> 487,39 -> 480,39 -> 480,37\r\n501,15 -> 505,15\r\n511,60 -> 522,60\r\n509,108 -> 513,108\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n513,76 -> 518,76\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n497,31 -> 502,31\r\n501,34 -> 506,34\r\n503,134 -> 512,134 -> 512,133\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n500,99 -> 504,99\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n478,37 -> 478,39 -> 474,39 -> 474,43 -> 487,43 -> 487,39 -> 480,39 -> 480,37\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n521,153 -> 521,155 -> 519,155 -> 519,158 -> 530,158 -> 530,155 -> 525,155 -> 525,153\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n521,153 -> 521,155 -> 519,155 -> 519,158 -> 530,158 -> 530,155 -> 525,155 -> 525,153\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n514,82 -> 519,82\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n495,15 -> 499,15\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n498,13 -> 502,13\r\n485,22 -> 490,22\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n478,37 -> 478,39 -> 474,39 -> 474,43 -> 487,43 -> 487,39 -> 480,39 -> 480,37\r\n511,85 -> 516,85\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n473,34 -> 478,34\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n495,124 -> 495,127 -> 489,127 -> 489,131 -> 503,131 -> 503,127 -> 500,127 -> 500,124\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n483,31 -> 488,31\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n500,105 -> 504,105\r\n521,82 -> 526,82\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n503,102 -> 507,102\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n487,34 -> 492,34\r\n503,108 -> 507,108\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n489,25 -> 494,25\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n492,17 -> 496,17\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n495,19 -> 499,19\r\n504,85 -> 509,85\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n508,150 -> 521,150\r\n507,82 -> 512,82\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n478,37 -> 478,39 -> 474,39 -> 474,43 -> 487,43 -> 487,39 -> 480,39 -> 480,37\r\n480,34 -> 485,34\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n506,105 -> 510,105\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n503,134 -> 512,134 -> 512,133\r\n497,102 -> 501,102\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n489,19 -> 493,19\r\n507,88 -> 507,91 -> 503,91 -> 503,96 -> 519,96 -> 519,91 -> 513,91 -> 513,88\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n495,124 -> 495,127 -> 489,127 -> 489,131 -> 503,131 -> 503,127 -> 500,127 -> 500,124\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n521,153 -> 521,155 -> 519,155 -> 519,158 -> 530,158 -> 530,155 -> 525,155 -> 525,153\r\n495,124 -> 495,127 -> 489,127 -> 489,131 -> 503,131 -> 503,127 -> 500,127 -> 500,124\r\n517,73 -> 517,69 -> 517,73 -> 519,73 -> 519,71 -> 519,73 -> 521,73 -> 521,72 -> 521,73 -> 523,73 -> 523,69 -> 523,73 -> 525,73 -> 525,69 -> 525,73 -> 527,73 -> 527,65 -> 527,73\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n507,88 -> 507,91 -> 503,91 -> 503,96 -> 519,96 -> 519,91 -> 513,91 -> 513,88\r\n486,28 -> 491,28\r\n507,88 -> 507,91 -> 503,91 -> 503,96 -> 519,96 -> 519,91 -> 513,91 -> 513,88\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n495,124 -> 495,127 -> 489,127 -> 489,131 -> 503,131 -> 503,127 -> 500,127 -> 500,124\r\n491,108 -> 495,108\r\n476,31 -> 481,31\r\n508,56 -> 508,49 -> 508,56 -> 510,56 -> 510,51 -> 510,56 -> 512,56 -> 512,49 -> 512,56 -> 514,56 -> 514,52 -> 514,56\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n525,85 -> 530,85\r\n510,163 -> 524,163 -> 524,162\r\n482,121 -> 482,120 -> 482,121 -> 484,121 -> 484,113 -> 484,121 -> 486,121 -> 486,115 -> 486,121 -> 488,121 -> 488,114 -> 488,121 -> 490,121 -> 490,120 -> 490,121 -> 492,121 -> 492,116 -> 492,121 -> 494,121 -> 494,112 -> 494,121 -> 496,121 -> 496,120 -> 496,121\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n504,17 -> 508,17\r\n521,153 -> 521,155 -> 519,155 -> 519,158 -> 530,158 -> 530,155 -> 525,155 -> 525,153\r\n521,153 -> 521,155 -> 519,155 -> 519,158 -> 530,158 -> 530,155 -> 525,155 -> 525,153\r\n493,28 -> 498,28\r\n494,105 -> 498,105\r\n507,88 -> 507,91 -> 503,91 -> 503,96 -> 519,96 -> 519,91 -> 513,91 -> 513,88\r\n495,124 -> 495,127 -> 489,127 -> 489,131 -> 503,131 -> 503,127 -> 500,127 -> 500,124\r\n507,88 -> 507,91 -> 503,91 -> 503,96 -> 519,96 -> 519,91 -> 513,91 -> 513,88\r\n510,79 -> 515,79\r\n510,163 -> 524,163 -> 524,162\r\n478,37 -> 478,39 -> 474,39 -> 474,43 -> 487,43 -> 487,39 -> 480,39 -> 480,37\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147\r\n518,85 -> 523,85\r\n492,147 -> 492,138 -> 492,147 -> 494,147 -> 494,140 -> 494,147 -> 496,147 -> 496,138 -> 496,147 -> 498,147 -> 498,143 -> 498,147 -> 500,147 -> 500,137 -> 500,147 -> 502,147 -> 502,137 -> 502,147 -> 504,147 -> 504,146 -> 504,147 -> 506,147 -> 506,145 -> 506,147 -> 508,147 -> 508,138 -> 508,147 -> 510,147 -> 510,143 -> 510,147";

            Board board = new Board(input, backgroundChar);
            board.Render(RENDER_X, RENDER_Y);

            Console.WriteLine($"Insert a delay for the simulation in miliseconds (higher is faster):\r\n" +
                $"Recommended values: 1 for the example small grid, 1000 for the input,\r\n" +
                $"10000 for the expanded input, 0.1 if you want to see the trajectory");
            double delay = double.Parse(Console.ReadLine());
            int sleeptime = 1;
            if(delay < 1)
            {
                sleeptime = (int) (1 / delay) * 10;
            }
            delay = Math.Max(1, Math.Ceiling(delay));

            FallingPoint currentSand = null;
            int sandsAtRest = 0;
            int reachedFloorAt = 0;
            int reachedTopAt = 0;
            int overflowedIntoVoidAt = 0;
            int stepsTaken = 0;
            bool finished = false;
            while (!finished)
            {
                if(currentSand == null)
                {
                    if(board.GetPoint(startingX, 0) == sandChar)
                    {
                        finished = true;
                        reachedTopAt = sandsAtRest;
                        break;
                    }
                    else
                    {
                        currentSand = new FallingPoint(startingX, 0, sandChar, board);
                    }
                }
                int result = currentSand.Fall();
                if(result == SAND_STILL_FALLING)
                {
                    if(reachedFloorAt == 0 && currentSand.y == board.maxy - 1)
                    {
                        reachedFloorAt = sandsAtRest;
                    }
                }
                else if (result == SAND_AT_PEACEFUL_REST)
                {
                    sandsAtRest++;
                    currentSand = null;
                }
                else if(result == SAND_OVERFLOWING_INTO_HARROWING_VOID)
                {
                    overflowedIntoVoidAt = sandsAtRest;
                    finished = true;
                }

                stepsTaken++;
                if(stepsTaken % delay == 0)
                {
                    List<DeprecatedPoint> highlights = new List<DeprecatedPoint>();
                    if(currentSand != null)
                    {
                        highlights = currentSand.trajectory;
                    }
                    board.Render(RENDER_X, RENDER_Y, highlights, '~');
                    Thread.Sleep(sleeptime);
                }
            }
            board.Render(RENDER_X, RENDER_Y);
            if (reachedFloorAt > 0)
                Console.WriteLine($"Reached the floor with {reachedFloorAt} sands at rest.");
            if (reachedTopAt > 0)
                Console.WriteLine($"Reached the top with {reachedTopAt} sands at rest.");
            if (overflowedIntoVoidAt > 0)
                Console.WriteLine($"Overflowed into the limitless harrowing void with {overflowedIntoVoidAt} sands at rest.");
        }

        //Primitive code here, I later remade these and put them into my libraries.
        class Board
        {
            public int minx = int.MaxValue, miny = 0, maxx = int.MinValue, maxy = int.MinValue;
            public char[,] charGrid;
            public char defaultChar = backgroundChar;

            public Board(string input, char defaultChar)
            {
                this.defaultChar = defaultChar;
                List<string> inputByLine = input.Split(new[] { "\r\n" }, StringSplitOptions.None).ToList(); //String.Split() only takes 1 char as delimiter. This is how you split by a string according to StackOverflow.
                List<RockPath> allPaths = new List<RockPath>();

                foreach (string line in inputByLine)
                {
                    RockPath thisRockPath = new RockPath();
                    string[] pointStrings = line.Split(new[] { " -> " }, StringSplitOptions.None);
                    for (int i = 0; i < pointStrings.Length; i++)
                    {
                        string[] pointString = pointStrings[i].Split(',');
                        DeprecatedPoint thisPoint = new DeprecatedPoint(int.Parse(pointString[0]), int.Parse(pointString[1]));
                        thisRockPath.points.Add(thisPoint);
                        UpdateMaxes(thisPoint);
                    }
                    allPaths.Add(thisRockPath);
                }
                InitializeBoard();
                foreach (RockPath path in allPaths)
                {
                    path.Draw(this);
                }
            }

            public void UpdateMaxes(DeprecatedPoint point)
            {
                maxy = Math.Max(maxy, point.y + 2);
                miny = Math.Min(miny, point.y);
                if (expandBoard)
                {
                    minx = (startingX - maxy);
                    maxx = (startingX + maxy);
                }
                else
                {
                    minx = Math.Min(minx, point.x);
                    maxx = Math.Max(maxx, point.x);
                }

            }

            public void DrawRectangle(DeprecatedPoint startingPoint, DeprecatedPoint endingPoint, char asChar) //What are lines if not flat rectangles?
            {
                int minx = Math.Min(startingPoint.x, endingPoint.x);
                int maxx = Math.Max(startingPoint.x, endingPoint.x);
                int miny = Math.Min(startingPoint.y, endingPoint.y);
                int maxy = Math.Max(startingPoint.y, endingPoint.y);

                for (int y = miny; y <= maxy; y++)
                {
                    for (int x = minx; x <= maxx; x++)
                    {
                        DrawPoint(x, y, asChar);
                    }
                }
            }

            public int ConvertX(int x)
            {
                return x - minx; //Point coordinates are different from our internal coordinates. i.e. the sand falls in the >400s but we start at 0, since we're just the viewport
            }
            public int ConvertY(int y)
            {
                return maxy - y; //The coordinates in the assignment go up-to-down but we go down-to-up.
            }

            public void DrawPoint(DeprecatedPoint p, char asChar)
            {
                DrawPoint(p.x, p.y, asChar);
            }
            public void DrawPoint(int x, int y, char asChar)
            {
                charGrid[ConvertX(x), ConvertY(y)] = asChar;
            }

            public char GetPoint(DeprecatedPoint p)
            {
                return GetPoint(p.x, p.y);
            }
            public char GetPoint(int x, int y)
            {
                return charGrid[ConvertX(x), ConvertY(y)];
            }

            public void InitializeBoard()
            {
                int height = maxy - miny + 1;
                int width = maxx - minx + 1;
                
                charGrid = new char[width, height];
                for (int y = 0; y < height; y++)
                {
                    for (int x = 0; x < width; x++)
                    {
                        if(y == 0)
                        {
                            charGrid[x, y] = wallChar;
                        }
                        else
                        {
                            charGrid[x, y] = defaultChar;
                        }
                        
                    }
                }
            }
            public bool InBounds(DeprecatedPoint p) { 
                if(p.x < minx || p.x > maxx || p.y < miny || p.y > maxy)
                {
                    return false;
                }
                return true;
            }

            public void Render(int posx, int posy, List<DeprecatedPoint>? highlights = null, char highlightChar = '█')
            {
                int oldy = Console.CursorTop;
                int oldX = Console.CursorLeft;
                int height = charGrid.GetLength(1);
                int width = charGrid.GetLength(0);
                for (int y = height - 1; y >= 0; y--)
                {
                    string temp = "";
                    Console.SetCursorPosition(posx, posy + height - y);
                    for (int x = 0; x <= width - 1; x++)
                    {
                        if (highlights != null && highlights.Contains(new DeprecatedPoint(x, y)))
                        {
                            temp += highlightChar;
                        }
                        else
                        {
                            temp += $"{charGrid[x, y]}";
                        }
                    }
                    temp += "\n";
                    Console.Write(temp);
                }
                Console.SetCursorPosition(oldX, oldy);
            }
        }

        class RockPath
        {
            public List<DeprecatedPoint> points = new List<DeprecatedPoint>();

            public void Draw(Board board)
            {
                DeprecatedPoint currentPoint = points[0]; //Starting with the initial point
                for (int i = 1; i < points.Count; i++)
                {
                    DeprecatedPoint nextPoint = points[i];
                    board.DrawRectangle(currentPoint, nextPoint, wallChar);
                    currentPoint = nextPoint;
                }
            }
        }

        //Should this really inherit from Point? Inheriting ToString() is nice, but what about Equals()?
        //Perhaps this should simply have a Point variable instead.
        //Perhaps there should be a BoardObject class that this inherits from.
        class FallingPoint : DeprecatedPoint
        {
            public char sprite;
            public Board board;
            public List<DeprecatedPoint> trajectory = new List<DeprecatedPoint>();

            public FallingPoint(int x, int y, char sprite, Board board) : base(x, y)
            {
                this.sprite = sprite;
                this.board = board;
                board.DrawPoint(x, y, sprite);
            }

            public List<DeprecatedPoint> GetCandidates()
            {
                DeprecatedPoint down = new DeprecatedPoint(x, y + 1); //Down is up, because the assignment's coordinate system says so
                DeprecatedPoint downAndToTheLeft = new DeprecatedPoint(x - 1, y + 1);
                DeprecatedPoint downAndToTheRight = new DeprecatedPoint(x + 1, y + 1);
                return new List<DeprecatedPoint> { down, downAndToTheLeft, downAndToTheRight }; //In that order of preference please!
            }

            public int Fall()
            {
                List<DeprecatedPoint> candidates = GetCandidates();
                for(int i = 0; i < candidates.Count; i++)
                {
                    DeprecatedPoint candidate = candidates[i];
                    if (!board.InBounds(candidate))
                    {
                        return SAND_OVERFLOWING_INTO_HARROWING_VOID;
                    }
                    if(board.GetPoint(candidate) == board.defaultChar)
                    {
                        trajectory.Add(new DeprecatedPoint(board.ConvertX(x), board.ConvertY(y)));
                        board.DrawPoint(x, y, board.defaultChar);
                        board.DrawPoint(candidate, sprite);
                        x = candidate.x;
                        y = candidate.y;
                        return SAND_STILL_FALLING;
                    }
                }
                return SAND_AT_PEACEFUL_REST;
            }
        }
    }
}
